{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "esbuild",
  "packageName": "@nrwl/esbuild",
  "description": "The Nx Plugin for EsBuild contains executors and generators that support building applications using EsBuild",
  "root": "/packages/esbuild",
  "source": "/packages/esbuild/src",
  "documentation": [],
  "generators": [
    {
      "name": "init",
      "factory": "./src/generators/init/init#esbuildInitGenerator",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxWebpackInit",
        "cli": "nx",
        "title": "Init Webpack Plugin",
        "description": "Init Webpack Plugin.",
        "type": "object",
        "properties": {
          "compiler": {
            "type": "string",
            "enum": ["babel", "swc", "tsc"],
            "description": "The compiler to initialize for.",
            "default": "babel"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Initialize the `@nrwl/esbuild` plugin.",
      "aliases": ["ng-add"],
      "hidden": true,
      "implementation": "/packages/esbuild/src/generators/init/init#esbuildInitGenerator.ts",
      "path": "/packages/esbuild/src/generators/init/schema.json"
    },
    {
      "name": "esbuild-project",
      "factory": "./src/generators/esbuild-project/esbuild-project#esbuildProjectGenerator",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxEsBuildProject",
        "cli": "nx",
        "title": "Add EsBuild Configuration to a project",
        "description": "Add EsBuild Configuration to a project.",
        "examples": [
          {
            "command": "nx g @nrwl/esbuild:esbuild-project my-package",
            "description": "Add a build target to 'my-package' library."
          },
          {
            "command": "nx g @nrwl/esbuild:esbuild-project my-package --importPath=@acme/package",
            "description": "Add a build target with a custom npm import path."
          },
          {
            "command": "nx g @nrwl/esbuild:esbuild-project my-package --main=packages/my-package/custom-entry.ts",
            "description": "Add a build target with a custom main entry file."
          }
        ],
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of the project.",
            "$default": { "$source": "argv", "index": 0 },
            "x-dropdown": "project",
            "x-prompt": "What is the name of the project to set up a esbuild for?"
          },
          "main": {
            "type": "string",
            "description": "Path relative to the workspace root for the main entry file. Defaults to '<projectRoot>/src/main.ts'.",
            "alias": "entryFile"
          },
          "tsConfig": {
            "type": "string",
            "description": "Path relative to the workspace root for the tsconfig file to build with. Defaults to '<projectRoot>/tsconfig.app.json'."
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "skipPackageJson": {
            "type": "boolean",
            "default": false,
            "description": "Do not add dependencies to `package.json`."
          },
          "importPath": {
            "type": "string",
            "description": "The library name used to import it, like `@myorg/my-awesome-lib`."
          },
          "platform": {
            "type": "string",
            "description": "Platform target for outputs.",
            "enum": ["browser", "node", "neutral"],
            "default": "node"
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Add esbuild configuration to a project.",
      "hidden": true,
      "implementation": "/packages/esbuild/src/generators/esbuild-project/esbuild-project#esbuildProjectGenerator.ts",
      "aliases": [],
      "path": "/packages/esbuild/src/generators/esbuild-project/schema.json"
    }
  ],
  "executors": [
    {
      "name": "esbuild",
      "implementation": "/packages/esbuild/src/executors/esbuild/esbuild.impl.ts",
      "schema": {
        "title": "esbuild (experimental)",
        "description": "Bundle a package for different platforms. Note: declaration (*.d.ts) file are not currently generated.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "main": {
            "type": "string",
            "description": "The path to the entry file, relative to project.",
            "alias": "entryFile",
            "x-completion-type": "file",
            "x-completion-glob": "**/*@(.js|.ts)"
          },
          "outputPath": {
            "type": "string",
            "description": "The output path of the generated files.",
            "x-completion-type": "directory"
          },
          "outputFileName": {
            "type": "string",
            "description": "Name of the main output file. Defaults same basename as 'main' file."
          },
          "tsConfig": {
            "type": "string",
            "description": "The path to tsconfig file.",
            "x-completion-type": "file",
            "x-completion-glob": "tsconfig.*.json"
          },
          "project": {
            "type": "string",
            "description": "The path to package.json file."
          },
          "additionalEntryPoints": {
            "type": "array",
            "description": "List of additional entry points.",
            "items": { "type": "string" },
            "default": []
          },
          "format": {
            "type": "array",
            "description": "Set the output format(s).",
            "alias": "f",
            "items": { "type": "string", "enum": ["esm", "cjs"] },
            "default": ["esm"]
          },
          "watch": {
            "type": "boolean",
            "description": "Enable re-building when files change.",
            "default": false
          },
          "assets": {
            "type": "array",
            "description": "List of static assets.",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "glob": {
                      "type": "string",
                      "description": "The pattern to match."
                    },
                    "input": {
                      "type": "string",
                      "description": "The input directory path in which to apply `glob`. Defaults to the project root."
                    },
                    "output": {
                      "type": "string",
                      "description": "Relative path within the output folder."
                    },
                    "ignore": {
                      "description": "An array of globs to ignore.",
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "additionalProperties": false,
                  "required": ["glob", "input", "output"]
                },
                { "type": "string" }
              ]
            }
          },
          "deleteOutputPath": {
            "type": "boolean",
            "description": "Remove previous output before build.",
            "alias": "clean",
            "default": true
          },
          "external": {
            "type": "array",
            "description": "Mark one or more module as external. Can use * wildcards, such as '*.png'.",
            "items": { "type": "string" }
          },
          "outputHashing": {
            "type": "string",
            "description": "Define the output filename cache-busting hashing mode.",
            "default": "none",
            "enum": ["none", "all"]
          },
          "metafile": {
            "type": "boolean",
            "description": "Generate a meta.json file in the output folder that includes metadata about the build. This file can be analyzed by other tools.",
            "default": false
          },
          "sourcemap": {
            "type": "boolean",
            "alias": "sourceMap",
            "description": "Generate sourcemap.",
            "default": false
          },
          "minify": {
            "type": "boolean",
            "description": "Minifies outputs.",
            "default": false
          },
          "platform": {
            "type": "string",
            "description": "Platform target for outputs.",
            "enum": ["browser", "node", "neutral"],
            "default": "node"
          },
          "target": {
            "type": "string",
            "description": "The environment target for outputs.",
            "default": "esnext"
          },
          "skipTypeCheck": {
            "type": "boolean",
            "description": "Skip type-checking via TypeScript. Skipping type-checking speeds up the build but type errors are not caught.",
            "default": false
          },
          "updateBuildableProjectDepsInPackageJson": {
            "type": "boolean",
            "description": "Update buildable project dependencies in `package.json`.",
            "default": true
          },
          "buildableProjectDepsInPackageJsonType": {
            "type": "string",
            "description": "When `updateBuildableProjectDepsInPackageJson` is `true`, this adds dependencies to either `peerDependencies` or `dependencies`.",
            "enum": ["dependencies", "peerDependencies"],
            "default": "peerDependencies"
          },
          "esbuildOptions": {
            "type": "object",
            "description": "Additional options to pass to esbuild. See https://esbuild.github.io/api/.",
            "additionalProperties": true
          }
        },
        "required": ["tsConfig", "main", "outputPath"],
        "definitions": {
          "assetPattern": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "glob": {
                    "type": "string",
                    "description": "The pattern to match."
                  },
                  "input": {
                    "type": "string",
                    "description": "The input directory path in which to apply `glob`. Defaults to the project root."
                  },
                  "output": {
                    "type": "string",
                    "description": "Relative path within the output folder."
                  },
                  "ignore": {
                    "description": "An array of globs to ignore.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "additionalProperties": false,
                "required": ["glob", "input", "output"]
              },
              { "type": "string" }
            ]
          }
        },
        "additionalProperties": true,
        "examplesFile": "`<app-root>/project.json`:\n\n```json\n{\n  //...\n  \"targets\": {\n    //...\n    \"build\": {\n      \"executor\": \"@nrwl/esbuild:esbuild\",\n      \"options\": {\n        \"main\": \"<app-root>\",\n        \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n        \"outputPath\": \"dist/<app-root>\"\n      }\n    }\n  }\n}\n```\n\n```bash\nnx build <app-name>\n```\n\n## Examples\n\n{% tabs %}\n{% tab label=\"CommonJS output\" %}\n\nThe CommonJS format is required in some environments, such as Electron applications. By default, `esbuild` will use the ESM format, which is recommended for Web and Node applications. You may also output to multiple formats.\n\n```bash\nnx build <app-name> --format=cjs\nnx build <app-name> --format=esm,cjs\nnx build <app-name> # defaults to es# defaults to esm\n```\n\n```json\n\"build\": {\n  \"executor\": \"@nrwl/esbuild:esbuild\",\n  \"options\": {\n  \"main\": \"<app-root>\",\n  \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n  \"outputPath\": \"dist/<app-root>\",\n    \"format\": [\"esm\", \"cjs\"]\n}\n```\n\n{% /tab %}\n{% tab label=\"External packages\" %}\n\nYou can avoid packages from being bundled by providing the `external` option with a list of packages to skip.\n\nYou can also use `*` wildcard to match assets.\n\n```json\n\"build\": {\n  \"executor\": \"@nrwl/esbuild:esbuild\",\n  \"options\": {\n  \"main\": \"<app-root>\",\n  \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n  \"outputPath\": \"dist/<app-root>\",\n    \"external\": [\"lodash\", \"*.png\"]\n}\n```\n\n{% /tab %}\n{% tab label=\"Skip type checking\" %}\n\nType checking is the slowest part of the build. You may want to skip type checking during build and run it as another job in CI.\n\n```json\n\"build\": {\n  \"executor\": \"@nrwl/esbuild:esbuild\",\n  \"options\": {\n  \"main\": \"<app-root>\",\n  \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n  \"outputPath\": \"dist/<app-root>\",\n  \"skipTypeCheck\": true\n}\n```\n\n{% /tab %}\n{% tabs %}\n",
        "presets": []
      },
      "description": "Bundle a package using EsBuild.",
      "aliases": [],
      "hidden": false,
      "path": "/packages/esbuild/src/executors/esbuild/schema.json"
    }
  ]
}
