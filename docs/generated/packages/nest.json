{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "nest",
  "description": "The Nx Plugin for Nest that contains executors and generators for allowing your workspace to create powerful Nest best in class APIs.",
  "root": "C:/development/nx/packages/nest",
  "source": "C:\\development\\nx\\packages\\nest\\src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview",
      "path": "/packages/nest",
      "file": "shared/nest-plugin",
      "content": "![NestJS logo](/shared/nest-logo.png)\r\n\r\nNest.js is a framework designed for building scalable server-side applications. In many ways, Nest is familiar to Angular developers:\r\n\r\n- It has excellent TypeScript support.\r\n- Its dependency injection system is similar to the one in Angular.\r\n- It emphasises testability.\r\n- Its configuration APIs are similar to Angular as well.\r\n\r\nMany conventions and best practices used in Angular applications can be also be used in Nest.\r\n\r\n## Setting Up Nest\r\n\r\nTo create a new workspace with Nest, run the following command:\r\n\r\n```shell\r\nnpx create-nx-workspace my-workspace --preset=nest\r\n```\r\n\r\nYarn users can use the following command instead:\r\n\r\n```shell\r\nyarn create nx-workspace my-workspace --preset=nest\r\n```\r\n\r\nTo add the Nest plugin to an existing workspace, run one the following commands:\r\n\r\n```shell\r\nnpm install -D @nrwl/nest\r\n```\r\n\r\n```shell\r\nyarn add -D @nrwl/nest\r\n```\r\n\r\n### Create Applications\r\n\r\nYou can add a new Nest application with the following command:\r\n\r\n```shell\r\nnx g @nrwl/nest:app my-nest-app\r\n```\r\n\r\n#### Application Proxies\r\n\r\nGenerating Nest applications has an option to configure other projects in the workspace to proxy API requests. This can be done by passing the `--frontendProject` with the project name you wish to enable proxy support for.\r\n\r\n```shell\r\nnx g @nrwl/nest:app my-nest-app --frontendProject my-angular-app\r\n```\r\n\r\n### Create Libraries\r\n\r\nYou can add a new Nest library with the following command:\r\n\r\n```shell\r\nnx g @nrwl/nest:lib my-nest-lib\r\n```\r\n\r\nTo make the library `buildable`, use the following command:\r\n\r\n```shell\r\nnx g @nrwl/nest:lib my-nest-lib --buildable\r\n```\r\n\r\nTo make the library `publishable`, use the following command:\r\n\r\n```shell\r\nnx g @nrwl/nest:lib my-nest-lib --publishable --importPath=@my-workspace/my-nest-lib\r\n```\r\n\r\n> Read more about [building and publishing libraries here](/structure/buildable-and-publishable-libraries).\r\n\r\n### Nest Generators\r\n\r\nThe Nest plugin for Nx extends the generators provided by Nest. Any commands that can be used with the Nest CLI can also be used with the `nx` command. The `--project` flag should be used for all Nest generators.\r\n\r\n> `--project` is used to infer the root of the project where the generators will generate the files.\r\n\r\n## Using Nest\r\n\r\n### Build\r\n\r\nYou can build an application with the following command:\r\n\r\n```shell\r\nnx build my-nest-app\r\n```\r\n\r\nThis applies to `buildable` libraries as well\r\n\r\n```shell\r\nnx build my-nest-lib\r\n```\r\n\r\n#### Waiting for other builds\r\n\r\nSetting the `waitUntilTargets` option with an array of projects (with the following format: `\"project:architect\"`) will execute those commands before serving the Nest application.\r\n\r\n### Serve\r\n\r\nYou can serve an application with the following command:\r\n\r\n```shell\r\nnx serve my-nest-app\r\n```\r\n\r\nThe `serve` command runs the `build` target, and executes the application.\r\n\r\nBy default, the serve command will run in `watch` mode. This allows code to be changed, and the Nest application to be rebuilt automatically.\r\n\r\n#### Debugging\r\n\r\nNest applications also have the `inspect` flag set, so you can attach your debugger to the running instance.\r\n\r\nDebugging is set to use a random port that is available on the system. The port can be changed by setting the port option in the `serve` architect in the workspace.json. Or by running the serve command with `--port <number>`.\r\n\r\nFor additional information on how to debug Node applications, see the [Node.js debugging getting started guide](https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients).\r\n\r\n### Lint\r\n\r\nYou can lint an application with the following command:\r\n\r\n```shell\r\nnx lint my-nest-app\r\n```\r\n\r\nYou can lint a library with the following command:\r\n\r\n```shell\r\nnx lint my-nest-lib\r\n```\r\n\r\n### Unit Test\r\n\r\nYou can run unit test for an application with the following command:\r\n\r\n```shell\r\nnx test my-nest-app\r\n```\r\n\r\nYou can run unit test for a library with the following command:\r\n\r\n```shell\r\nnx test my-nest-lib\r\n```\r\n\r\n## More Documentation\r\n\r\n- [Todo Tutorial](/node-tutorial/01-create-application)\r\n- [Using Jest](/jest/overview)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
