{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "express",
  "description": "The Nx Plugin for Express that contains executors and generators for allowing your workspace to create powerful Express Node applications and APIs.",
  "root": "C:/development/nx/packages/express",
  "source": "C:\\development\\nx\\packages\\express\\src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview",
      "path": "/packages/express",
      "file": "shared/express-plugin",
      "content": "![Express Logo](/shared/express-logo.png)\r\n\r\n[Express](https://expressjs.com/) is mature, minimal, and an open source web framework for making web applications and\r\napis.\r\n\r\n## Setting Up Express\r\n\r\nTo create a new workspace with Express, run the following command:\r\n\r\n```shell\r\n npx create-nx-workspace --preset=express\r\n```\r\n\r\n### Adding Express to an Existing Project\r\n\r\nInstall the express plugin\r\n\r\n```shell\r\nnpm install --save-dev @nrwl/express\r\n```\r\n\r\n```shell\r\nyarn add --dev @nrwl/express\r\n```\r\n\r\n## Creating Applications\r\n\r\nAdd a new application to your workspace with the following command:\r\n\r\n```shell\r\nnx g @nrwl/express:app my-app\r\n```\r\n\r\nServe the application by running\r\n\r\n```shell\r\nnx serve my-app\r\n```\r\n\r\nThis starts the application on localhost:3333/api by default.\r\n\r\n> Express does not come with any library generators, but you can leverage the[`@nrwl/js`](/js/overview#create-libraries) plugin to generate a Node.js library for your express application.\r\n\r\n### Application Proxies\r\n\r\nThe Express application generator has an option to configure other projects in the workspace to proxy API requests. This\r\ncan be done by passing the `--frontendProject` with the project name you wish to enable proxy support for.\r\n\r\n```shell\r\nnx g @nrwl/express:app <express-app> --frontendProject my-react-app\r\n```\r\n\r\n## Using Express\r\n\r\n### Testing Projects\r\n\r\nYou can run unit tests with:\r\n\r\n```shell\r\nnx test <project-name>\r\n```\r\n\r\n### Building Projects\r\n\r\nExpress projects can be built with:\r\n\r\n```shell\r\nnx build <project-name>\r\n```\r\n\r\nBuild artifacts will be found in the `dist` directory under `apps/<project-name>` by default. Customize the build\r\nconfiguration by editing `outputPath` in the [project configuration](/configuration/projectjson).\r\n\r\n### Waiting for Other Tasks\r\n\r\nYou can wait for other tasks to run before serving the express app which can be handy for spinning up various services\r\nthe application depends onâ€” for example, other apis in a microservice.\r\n\r\nSetting the `waitUntilTargets` option with an array of targets (format: `\"project:target\"`) executes those tasks\r\nbefore serving the Express application.\r\n\r\n## More Documentation\r\n\r\n- [Using Jest](/jest/overview)\r\n- [@nrwl/js](/js/overview)\r\n- [Express](https://expressjs.com/)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
