{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "node",
  "description": "The Node Plugin contains generators and executors to manage Node applications within an Nx workspace.",
  "root": "C:/development/nx/packages/node",
  "source": "C:\\development\\nx\\packages\\node\\src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview",
      "path": "/packages/node",
      "file": "shared/node-plugin",
      "content": "The Node Plugin contains generators and executors to manage Node applications within an Nx workspace. It provides:\r\n\r\n## Setting Up Node\r\n\r\nTo add the Node plugin to an existing workspace, run one of the following:\r\n\r\n```bash\r\n# For npm users\r\nnpm install -D @nrwl/node\r\n\r\n# For yarn users\r\nyarn add -D @nrwl/node\r\n```\r\n\r\n### Creating Applications\r\n\r\nYou can add a new application with the following:\r\n\r\n```bash\r\nnx g @nrwl/node:application my-new-app\r\n```\r\n\r\nYou can run your application with `nx serve my-new-app`, which starts it in watch mode.\r\n\r\n### Creating Libraries\r\n\r\nNode libraries are a good way to separate features within your organization. To create a Node library run the following command:\r\n\r\n```bash\r\nnx g @nrwl/js:node my-new-lib\r\n\r\n# If you want the library to be buildable or publishable to npm\r\nnx g @nrwl/node:lib my-new-lib --buildable\r\nnx g @nrwl/node:lib my-new-lib \\\r\n--publishable \\\r\n--importPath=@myorg/my-new-lib\r\n```\r\n\r\n## Using Node\r\n\r\n### Testing Projects\r\n\r\nYou can run unit tests with:\r\n\r\n```bash\r\nnx test my-new-app\r\nnx test my-new-lib\r\n```\r\n\r\nReplace `my-new-app` with the name or your project. This command works for both applications and libraries.\r\n\r\n### Building Projects\r\n\r\nNode applications can be build with:\r\n\r\n```bash\r\nnx build my-new-app\r\n```\r\n\r\nAnd if you generated a library with `--buildable`, then you can build a library as well:\r\n\r\n```bash\r\nnx build my-new-lib\r\n```\r\n\r\nThe output is in the `dist` folder. You can customize the output folder by setting `outputPath` in the project's `project.json` file.\r\n\r\n### Application Proxies\r\n\r\nGenerating Node applications has an option to configure other projects in the workspace to proxy API requests. This can be done by passing the `--frontendProject` with the project name you wish to enable proxy support for.\r\n\r\n```bash\r\nnx g @nrwl/node:application my-new-app \\\r\n--frontendProject my-react-app\r\n```\r\n\r\n### Debugging\r\n\r\nDebugging is set to use a random port that is available on the system. The port can be changed by setting the port option in the `serve` architect in the project.json. Or by running the serve command with `--port <number>`.\r\n\r\nFor additional information on how to debug Node applications, see the [Node.js debugging getting started guide](https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients).\r\n\r\n## More Documentation\r\n\r\n- [Using Cypress](/cypress/overview)\r\n- [Using Jest](/jest/overview)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
