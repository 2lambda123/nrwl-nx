{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "angular",
  "description": "The Nx Plugin for Angular contains executors, generators, and utilities for managing Angular applications and libraries within an Nx workspace. It provides: \n\n- Integration with libraries such as Storybook, Jest, ESLint, Tailwind CSS, Cypress, Karma, and Protractor. \n\n- Generators to help scaffold code quickly (like: Micro Frontends, Libraries, both internal to your codebase and publishable to npm) \n\n- Upgrading AngularJS applications \n\n- Single Component Application Modules (SCAMs) \n\n- NgRx helpers. \n\n- Utilities for automatic workspace refactoring.",
  "root": "C:/development/nx/packages/angular",
  "source": "C:\\development\\nx\\packages\\angular\\src",
  "documentation": [
    {
      "name": "Overview",
      "id": "overview",
      "path": "/packages/angular",
      "file": "shared/angular-plugin",
      "content": "![Angular logo](/shared/angular-logo.png)\r\n\r\nThe Nx Plugin for Angular contains executors, generators, and utilities for managing Angular applications and libraries within an Nx workspace. It provides:\r\n\r\n- Integration with libraries such as Storybook, Jest, Cypress, Karma, and Protractor.\r\n- Generators to help scaffold code quickly, including:\r\n  - Micro Frontends\r\n  - Libraries, both internal to your codebase and publishable to npm\r\n  - Upgrading AngularJS applications\r\n  - Single Component Application Modules (SCAMs)\r\n- NgRx helpers.\r\n- Utilities for automatic workspace refactoring.\r\n\r\n## Setting up the Angular plugin\r\n\r\nAdding the Angular plugin to an existing Nx workspace can be done with the following:\r\n\r\n```bash\r\nyarn add -D @nrwl/angular\r\n```\r\n\r\n```bash\r\nnpm install -D @nrwl/angular\r\n```\r\n\r\n## Using the Angular Plugin\r\n\r\n### Generating an application\r\n\r\nIt's straightforward to generate an Angular application:\r\n\r\n```bash\r\nnx g @nrwl/angular:app appName\r\n```\r\n\r\nBy default, the application will be generated with:\r\n\r\n- ESLint as the linter.\r\n- Jest as the unit test runner.\r\n- Cypress as the E2E test runner.\r\n\r\nWe can then serve, build, test, lint, and run e2e tests on the application with the following commands:\r\n\r\n```bash\r\nnx serve appName\r\nnx build appName\r\nnx test appName\r\nnx lint appName\r\nnx e2e appName\r\n```\r\n\r\n### Generating a library\r\n\r\nGenerating an Angular library is very similar to generating an application:\r\n\r\n```bash\r\nnx g @nrwl/angular:lib libName\r\n```\r\n\r\nBy default, the library will be generated with:\r\n\r\n- ESLint as the linter.\r\n- Jest as the unit test runner.\r\n\r\nWe can then test and lint the library with the following commands:\r\n\r\n```bash\r\nnx test libName\r\nnx lint libName\r\n```\r\n\r\nRead more about:\r\n\r\n- [Creating Libraries](/structure/creating-libraries)\r\n- [Library Types](/structure/library-types)\r\n- [Buildable and Publishable Libraries](/structure/buildable-and-publishable-libraries)\r\n\r\n## More Documentation\r\n\r\n- [Angular Nx Tutorial](/angular-tutorial/01-create-application)\r\n- [Setup Module Federation with Angular and Nx](/module-federation/faster-builds)\r\n- [Using NgRx](/guides/misc-ngrx)\r\n- [Using Data Persistence operators](/guides/misc-data-persistence)\r\n- [Upgrading an AngularJS application to Angular](/migration/migration-angularjs)\r\n- [Using Tailwind CSS with Angular projects](/guides/using-tailwind-css-with-angular-projects)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
