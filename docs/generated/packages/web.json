{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "web",
  "description": "The Nx Plugin for Web Components contains generators for managing Web Component applications and libraries within an Nx workspace. It provides:\n\n\n- Integration with libraries such as Jest, Cypress, and Storybook.\n\n- Scaffolding for creating buildable libraries that can be published to npm.\n\n- Utilities for automatic workspace refactoring.",
  "root": "C:/development/nx/packages/web",
  "source": "C:\\development\\nx\\packages\\web\\src",
  "documentation": [
    {
      "name": "Overview",
      "id": "overview",
      "path": "/packages/web",
      "file": "shared/web-plugin",
      "content": "The Nx Plugin for Web Components contains generators for managing Web Component applications and libraries within an Nx workspace. It provides:\r\n\r\n- Integration with libraries such as Jest, Cypress, and Storybook.\r\n- Scaffolding for creating buildable libraries that can be published to npm.\r\n- Utilities for automatic workspace refactoring.\r\n\r\n## Setting Up Web\r\n\r\nTo create a new workspace with web, run `npx create-nx-workspace@latest --preset=web`.\r\n\r\nTo add the web plugin to an existing workspace, run one of the following:\r\n\r\n```bash\r\n# For npm users\r\nnpm install -D @nrwl/web\r\n\r\n# For yarn users\r\nyarn add -D @nrwl/web\r\n```\r\n\r\n### Creating Applications\r\n\r\nYou can add a new application with the following:\r\n\r\n```bash\r\nnx g @nrwl/web:app my-new-app\r\n```\r\n\r\nThe application uses no framework and generates with web components. You can add any framework you want on top of the default setup.\r\n\r\nTo start the application in development mode, run `nx serve my-new-app`.\r\n\r\n{% callout type=\"note\" title=\"React\" %}\r\nIf you are looking to add a React application, check out the [React plugin](/packages/react).\r\n{% /callout %}\r\n\r\n### Creating Libraries\r\n\r\nTo create a generic TypeScript library (i.e. non-framework specific), use the [`@nrwl/js`](/js/overview) plugin.\r\n\r\n```bash\r\nnx g @nrwl/js:lib my-new-lib\r\n\r\n# If you want the library to be buildable or publishable to npm\r\nnx g @nrwl/web:lib my-new-lib --buildable\r\nnx g @nrwl/web:lib my-new-lib \\\r\n--publishable \\\r\n--importPath=@myorg/my-new-lib\r\n```\r\n\r\n## Using Web\r\n\r\n### Testing Projects\r\n\r\nYou can run unit tests with:\r\n\r\n```bash\r\nnx test my-new-app\r\nnx test my-new-lib\r\n```\r\n\r\nReplace `my-new-app` with the name or your project. This command works for both applications and libraries.\r\n\r\nYou can also run E2E tests for applications:\r\n\r\n```bash\r\nnx e2e my-new-app-e2e\r\n```\r\n\r\nReplace `my-new-app-e2e` with the name or your project with `-e2e` appended.\r\n\r\n### Building Projects\r\n\r\nReact applications can be build with:\r\n\r\n```bash\r\nnx build my-new-app\r\n```\r\n\r\nAnd if you generated a library with `--buildable`, then you can build a library as well:\r\n\r\n```bash\r\nnx build my-new-lib\r\n```\r\n\r\nThe output is in the `dist` folder. You can customize the output folder by setting `outputPath` in the project's `project.json` file.\r\n\r\nThe application in `dist` is deployable, and you can try it out locally with:\r\n\r\n```bash\r\nnpx http-server dist/apps/my-new-app\r\n```\r\n\r\nThe library in `dist` is publishable to npm or a private registry.\r\n\r\n## More Documentation\r\n\r\n- [Using Cypress](/packages/cypress)\r\n- [Using Jest](/packages/jest)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
