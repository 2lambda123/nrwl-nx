{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "cypress",
  "description": "The Nx Plugin for Cypress contains executors and generators allowing your workspace to use the powerful Cypress integration testing capabilities.",
  "root": "C:/development/nx/packages/cypress",
  "source": "C:\\development\\nx\\packages\\cypress\\src",
  "documentation": [
    {
      "name": "Overview",
      "id": "overview",
      "path": "/packages/cypress",
      "file": "shared/cypress-plugin",
      "content": "![Cypress logo](/shared/cypress-logo.png)\r\n\r\nCypress is a test runner built for the modern web. It has a lot of great features:\r\n\r\n- Time travel\r\n- Real-time reloads\r\n- Automatic waiting\r\n- Spies, stubs, and clocks\r\n- Network traffic control\r\n- Screenshots and videos\r\n\r\n## Setting Up Cypress\r\n\r\n> Info about [Cypress Component Testing can be found here](/cypress/cypress-component-testing)\r\n\r\nIf the `@nrwl/cypress` package is not installed, install the version that matches your `nx` package version.\r\n\r\n```bash\r\nyarn add --dev @nrwl/cypress\r\n```\r\n\r\n```bash\r\nnpm install --save-dev @nrwl/cypress\r\n```\r\n\r\n## E2E Testing\r\n\r\nBy default, when creating a new frontend application, Nx will use Cypress to create the e2e tests project.\r\n\r\n```bash\r\nnx g @nrwl/web:app frontend\r\n```\r\n\r\n### Creating a Cypress E2E project for an existing project\r\n\r\nTo generate an E2E project based on an existing project, run the following generator\r\n\r\n```bash\r\nnx g @nrwl/cypress:cypress-project your-app-name-e2e --project=your-app-name\r\n```\r\n\r\nOptionally, you can use the `--baseUrl` option if you don't want cypress plugin to serve `your-app-name`.\r\n\r\n```bash\r\nnx g @nrwl/cypress:cypress-project your-app-name-e2e --baseUrl=http://localhost:4200\r\n```\r\n\r\nReplace `your-app-name` with the app's name as defined in your `workspace.json` file.\r\n\r\n### Testing Applications\r\n\r\nRun `nx e2e frontend-e2e` to execute e2e tests with Cypress.\r\n\r\nYou can run your e2e test against a production build with the `--prod` flag\r\n\r\n```bash\r\nnx e2e frontend-e2e --prod\r\n```\r\n\r\nBy default, Cypress will run in headless mode. You will have the result of all the tests and errors (if any) in your\r\nterminal. Screenshots and videos will be accessible in `dist/cypress/apps/frontend/screenshots` and `dist/cypress/apps/frontend/videos`.\r\n\r\n### Watching for Changes (Headed Mode)\r\n\r\nWith, `nx e2e frontend-e2e --watch` Cypress will start in headed mode where you can see your application being tested.\r\n\r\nRunning Cypress with `--watch` is a great way to enhance dev workflow - you can build up test files with the application\r\nrunning and Cypress will re-run those tests as you enhance and add to the suite.\r\n\r\n```bash\r\nnx e2e frontend-e2e --prod\r\n```\r\n\r\n### Specifying a Custom Url to Test\r\n\r\nThe `baseUrl` property provides you the ability to test an application hosted on a specific domain.\r\n\r\n```bash\r\nnx e2e frontend-e2e --baseUrl=https://frontend.com\r\n```\r\n\r\n> If no `baseUrl` and no `devServerTarget` are provided, Cypress will expect to have the `baseUrl` property in\r\n> the cypress config file, or will error.\r\n\r\n## Using cypress.config.ts\r\n\r\nIf you need to fine tune your Cypress setup, you can do so by modifying `cypress.config.ts` in the project root. For\r\ninstance,\r\nyou can easily add your `projectId` to save all the screenshots and videos into your Cypress dashboard. The complete\r\nconfiguration is documented\r\non [the official website](https://docs.cypress.io/guides/references/configuration.html#Options).\r\n"
    },
    {
      "name": "Component Testing",
      "id": "cypress-component-testing",
      "file": "shared/cypress-component-testing",
      "content": "# Cypress Component Testing\r\n\r\n> Component testing is in a early preview and requires Cypress v10 and above.\r\n> See our [guide for more information](/cypress/v10-migration-guide) to migrate to Cypress v10.\r\n\r\nUnlike [E2E testing](/packages/cypress), component testing does not create a new project. Instead, Cypress component testing is added\r\ndirectly to a project.\r\n\r\n```bash\r\nnx g @nrwl/react:cypress-component-configuration --project=your-react-lib\r\n```\r\n\r\nYou can optionally pass in `--generate-tests` to create component tests for all components within the library.\r\n\r\n## Testing Projects\r\n\r\nRun `nx component-test your-lib` to execute the component tests with Cypress.\r\n\r\nBy default, Cypress will run in headless mode. You will have the result of all the tests and errors (if any) in your\r\nterminal. Screenshots and videos will be accessible in `dist/cypress/libs/your-lib/screenshots` and `dist/cypress/libs/your-lib/videos`.\r\n\r\n## Watching for Changes (Headed Mode)\r\n\r\nWith, `nx component-test your-lib --watch` Cypress will start in headed mode. Where you can see your component being tested.\r\n\r\nRunning Cypress with `--watch` is a great way to iterate on your components since cypress will rerun your tests as you make those changes validating the new behavior.\r\n\r\n## More Information\r\n\r\nYou can read more on component testing in the [Cypress documentation](https://docs.cypress.io/guides/component-testing/writing-your-first-component-test).\r\n"
    },
    {
      "name": "v10 Migration Guide",
      "id": "v10-migration-guide",
      "file": "shared/guides/cypress/cypress-v10-migration",
      "content": "# Migrating to Cypress V10\r\n\r\nCypress v10 introduce new features, like component testing, along with some breaking changes.\r\n\r\nBefore continuing, make sure you have all your changes committed and have a clean working tree.\r\n\r\nYou can migrate an E2E project to v10 by running the following command:\r\n\r\n```bash\r\nnx g @nrwl/cypress:migrate-to-cypress-10\r\n```\r\n\r\nIn general, these are the steps taken to migrate your project:\r\n\r\n1. Migrates your existing `cypress.json` configuration to a new `cypress.config.ts` configuration file.\r\n   - The `pluginsFile` option has been replaced for `setupNodeEvents`. We will import the file and add it to\r\n     the `setupNodeEvents` config option. Double-check your plugins are working correctly.\r\n2. Rename all test files from `.spec.ts` to `.cy.ts`\r\n3. Rename the `support/index.ts` to `support/e2e.ts` and update any associated imports\r\n4. Rename the `integrations` folder to the `e2e` folder\r\n\r\nWe take the best effort to make this migration seamless, but there can be edge cases we didn't anticipate. So feel free to [open an issue](https://github.com/nrwl/nx/issues/new?assignees=&labels=type%3A+bug&template=1-bug.md) if you come across any problems.\r\n\r\nYou can also consult the [official Cypress migration guide](https://docs.cypress.io/guides/references/migration-guide#Migrating-to-Cypress-version-10-0) if you get stuck and want to manually migrate your projects.\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
