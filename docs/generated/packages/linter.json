{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "linter",
  "description": "The Linter plugin contains executors, generator, plugin and utilities used for linting JavaScript/TypeScript projects within an Nx workspace.",
  "root": "C:/development/nx/packages/linter",
  "source": "C:\\development\\nx\\packages\\linter\\src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview",
      "path": "/packages/linter",
      "file": "shared/linter-plugin",
      "content": "The Linter plugin contains executors, generator, plugin and utilities used for linting JavaScript/TypeScript projects within an Nx workspace.\r\n\r\n## Setting Up Linter\r\n\r\n### Installation\r\n\r\nIn any Nx workspace, you can install `@nrwl/linter` by running the following commands if `@nrwl/linter` package is not installed:\r\n\r\n```bash\r\nnpm i --save-dev @nrwl/linter\r\n```\r\n\r\n```bash\r\nyarn add --dev @nrwl/linter\r\n```\r\n\r\n## Lint\r\n\r\nYou can lint an application or a library with the following command:\r\n\r\n```bash\r\nnx lint my-app\r\n```\r\n\r\n```bash\r\nnx lint my-lib\r\n```\r\n\r\n## Utils\r\n\r\n- [convert-tslint-to-eslint](/packages/angular/generators/convert-tslint-to-eslint) - Converts a project linter from [TSLint](https://palantir.github.io/tslint/) to [ESLint](https://eslint.org/)\r\n"
    },
    {
      "id": "eslint-plugin-nx",
      "name": "eslint-plugin-nx",
      "file": "shared/eslint-plugin-nx",
      "content": "![ESLint logo](/shared/eslint-logo.png)\r\n\r\nA plugin containing a collection of recommended ESLint rule configurations wrapped as ESLint plugins and an Nx specific [enforce-module-boundaries](#enforce-module-boundaries) rule.\r\n\r\n## Setting Up ESLint Plugin\r\n\r\n### Installation\r\n\r\nIn any Nx workspace, you can install `@nrwl/eslint-plugin-nx` by running the following commands if the package is not already installed:\r\n\r\n```bash\r\nnpm i --save-dev @nrwl/eslint-plugin-nx\r\n```\r\n\r\n```bash\r\nyarn add --dev @nrwl/eslint-plugin-nx\r\n```\r\n\r\n## ESLint plugins\r\n\r\nThe plugin contains the following rule configurations divided into sub-plugins.\r\n\r\n### JavaScript\r\n\r\nThe `@nrwl/nx/javascript` ESLint plugin contains best practices when using JavaScript.\r\n\r\n### TypeScript\r\n\r\nThe `@nrwl/nx/typescript` ESLint plugin contains best practices when using TypeSript.\r\n\r\n### Angular\r\n\r\nContains configurations matching best practices when using Angular framework:\r\n\r\n- @nrwl/nx/angular\r\n- @nrwl/nx/angular-template\r\n\r\n### React\r\n\r\nContains configurations matching best practices when using React framework:\r\n\r\n- @nrwl/nx/react-base\r\n- @nrwl/nx/react-jsx\r\n- @nrwl/nx/react-typescript\r\n\r\nYou can also use `@nrwl/nx/react` which includes all three `@nrwl/nx/react-*` plugins\r\n\r\n## enforce-module-boundaries\r\n\r\nThe `@nrwl/nx/enforce-module-boundaries` ESLint rule enables you to define strict rules for accessing resources between different projects in the repository. By enforcing strict boundaries it helps keep prevent unplanned cross-dependencies.\r\n\r\n### Usage\r\n\r\nYou can use `enforce-module-boundaries` rule by adding it to your ESLint rules configuration:\r\n\r\n```json\r\n{\r\n  // ... more ESLint config here\r\n  \"overrides\": [\r\n    {\r\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\r\n      \"rules\": {\r\n        \"@nrwl/nx/enforce-module-boundaries\": [\r\n          \"error\",\r\n          {\r\n            // ...rule specific configuration\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    // ... more ESLint overrides here\r\n  ]\r\n}\r\n```\r\n\r\nRead more about proper usage of this rule:\r\n\r\n- [Imposing Constraints on the Project Graph](/structure/monorepo-tags)\r\n- [Taming Code Organization with Module Boundaries in Nx](https://blog.nrwl.io/mastering-the-project-boundaries-in-nx-f095852f5bf4)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
