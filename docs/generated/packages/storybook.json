{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "storybook",
  "description": "The Nx Plugin for Storybook that contains executors and generators for allowing your workspace to use the powerful Storybook integration testing & documenting capabilities.",
  "root": "C:/development/nx/packages/storybook",
  "source": "C:\\development\\nx\\packages\\storybook\\src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview Generic",
      "path": "/packages/storybook",
      "file": "shared/guides/storybook/plugin-overview",
      "content": "![Storybook logo](/shared/storybook-logo.png)\r\n\r\nStorybook is a development environment for UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.\r\n\r\nThis guide will briefly walk you through using Storybook within an Nx workspace.\r\n\r\n## Setting Up Storybook\r\n\r\n### Add the Storybook plugin\r\n\r\n```bash\r\nyarn add --dev @nrwl/storybook\r\n```\r\n\r\n## Using Storybook\r\n\r\n### Generating Storybook Configuration\r\n\r\nYou can generate Storybook configuration for an individual project with this command:\r\n\r\n```bash\r\nnx g @nrwl/react:storybook-configuration project-name\r\n```\r\n\r\n### Running Storybook\r\n\r\nServe Storybook using this command:\r\n\r\n```bash\r\nnx run project-name:storybook\r\n```\r\n\r\n## More Documentation\r\n\r\nYou can find dedicated information for React and Angular:\r\n\r\n- [Overview Storybook For Angular](/storybook/overview-angular)\r\n- [Overview Storybook For React](/storybook/overview-react)\r\n\r\nFor more on using Storybook, see the [official Storybook documentation](https://storybook.js.org/docs/basics/introduction/).\r\n\r\n### Migration Scenarios\r\n\r\nHere's more information on common migration scenarios for Storybook with Nx. For Storybook specific migrations that are not automatically handled by Nx please refer to the [official Storybook page](https://storybook.js.org/)\r\n\r\n- [Upgrading to Storybook 6](/storybook/upgrade-storybook-v6-react)\r\n- [Migrate to the Nrwl React Storybook Preset](/storybook/migrate-webpack-final-react)\r\n"
    },
    {
      "id": "overview-react",
      "name": "Overview (React)",
      "file": "shared/guides/storybook/plugin-react",
      "content": "# Storybook\n\n![Storybook logo](/shared/storybook-logo.png)\n\nStorybook is a development environment for UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.\n\nThis guide will briefly walk you through using Storybook within an Nx workspace.\n\n## Setting Up Storybook\n\n### Add the Storybook plugin\n\n```bash\nyarn add --dev @nrwl/storybook\n```\n\n## Using Storybook\n\n### Generating Storybook Configuration\n\nYou can generate Storybook configuration for an individual project with this command:\n\n```bash\nnx g @nrwl/react:storybook-configuration project-name\n```\n\n### Running Storybook\n\nServe Storybook using this command:\n\n```bash\nnx run project-name:storybook\n```\n\n### Anatomy of the Storybook setup\n\nWhen running the Nx Storybook generator, it'll configure the Nx workspace to be able to run Storybook seamlessly. It'll create\n\n- a global Storybook configuration\n- a project specific Storybook configuration\n\nThe **global** Storybook configuration allows to set addon-ons or custom webpack configuration at a global level that applies to all Storybook's within the Nx workspace. You can find that folder at `.storybook/` at the root of the workspace.\n\n```treeview\n<workspace name>/\n├── .storybook/\n│   ├── main.js\n│   ├── tsconfig.json\n├── apps/\n├── libs/\n├── nx.json\n├── package.json\n├── README.md\n└── etc...\n```\n\nThe project-specific Storybook configuration is pretty much similar what you would have for a non-Nx setup of Storybook. There's a `.storybook` folder within the project root folder.\n\n```treeview\n<project root>/\n├── .storybook/\n│   ├── main.js\n│   ├── preview.js\n│   ├── tsconfig.json\n├── src/\n├── README.md\n├── tsconfig.json\n└── etc...\n```\n\n### Nx React Storybook Preset\n\n`@nrwl/react` ships with a Storybook preset to make sure it uses the very same configuration as your Nx React application. When you generate a Storybook configuration for a project, it'll automatically add the preset to your configuration.\n\n```typescript\nconst rootMain = require('../../../.storybook/main');\n\nmodule.exports = {\n  ...rootMain,\n  addons: [...rootMain.addons, '@nrwl/react/plugins/storybook'],\n  ...\n};\n```\n\n### Using Addons\n\nTo register a [Storybook addon](https://storybook.js.org/addons/) for all storybook instances in your workspace:\n\n1. In `/.storybook/main.js`, in the `addons` array of the `module.exports` object, add the new addon:\n   ```typescript\n   module.exports = {\n   stories: [...],\n   ...,\n   addons: [..., '@storybook/addon-essentials'],\n   };\n   ```\n2. If a decorator is required, in each project's `<project-path>/.storybook/preview.js`, you can export an array called `decorators`.\n\n   ```typescript\n   import someDecorator from 'some-storybook-addon';\n   export const decorators = [someDecorator];\n   ```\n\n**-- OR --**\n\nTo register an [addon](https://storybook.js.org/addons/) for a single storybook instance, go to that project's `.storybook` folder:\n\n1. In `main.js`, in the `addons` array of the `module.exports` object, add the new addon:\n   ```typescript\n   module.exports = {\n   stories: [...],\n   ...,\n   addons: [..., '@storybook/addon-essentials'],\n   };\n   ```\n2. If a decorator is required, in `preview.js` you can export an array called `decorators`.\n\n   ```typescript\n   import someDecorator from 'some-storybook-addon';\n   export const decorators = [someDecorator];\n   ```\n\n### Auto-generate Stories\n\nThe `@nrwl/react:storybook-configuration` generator has the option to automatically generate `*.stories.ts` files for each component declared in the library.\n\n```treeview\n<some-folder>/\n├── my.component.ts\n└── my.component.stories.ts\n```\n\nYou can re-run it at a later point using the following command:\n\n```bash\nnx g @nrwl/react:stories <project-name>\n```\n\n### Cypress tests for Stories\n\nBoth `storybook-configuration` generator gives the option to set up an e2e Cypress app that is configured to run against the project's Storybook instance.\n\nTo launch Storybook and run the Cypress tests against the iframe inside of Storybook:\n\n```bash\nnx run project-name-e2e:e2e\n```\n\nThe url that Cypress points to should look like this:\n\n`'/iframe.html?id=buttoncomponent--primary&args=text:Click+me!;padding;style:default'`\n\n- `buttoncomponent` is a lowercase version of the `Title` in the `*.stories.ts` file.\n- `primary` is the name of an individual story.\n- `style=default` sets the `style` arg to a value of `default`.\n\nChanging args in the url query parameters allows your Cypress tests to test different configurations of your component. You can [read the documentation](https://storybook.js.org/docs/react/writing-stories/args#setting-args-through-the-url) for more information.\n\n### Example Files\n\n**\\*.stories.tsx file**\n\n```typescript\nimport { Story, Meta } from '@storybook/react';\nimport { Button, ButtonProps } from './button';\n\nexport default {\n  component: Button,\n  title: 'Button',\n} as Meta;\n\nconst Template: Story<ButtonProps> = (args) => <Button {...args} />;\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  text: 'Click me!',\n  padding: 0,\n  style: 'default',\n};\n```\n\n**Cypress test file**\n\n> Depending on your Cypress version, the file will end with .spec.ts or .cy.ts\n\n```typescript\ndescribe('shared-ui', () => {\n  beforeEach(() =>\n    cy.visit(\n      '/iframe.html?id=buttoncomponent--primary&args=text:Click+me!;padding;style:default'\n    )\n  );\n\n  it('should render the component', () => {\n    cy.get('storybook-trial-button').should('exist');\n  });\n});\n```\n\n## More Documentation\n\nFor more on using Storybook, see the [official Storybook documentation](https://storybook.js.org/docs/basics/introduction/).\n\n### Migration Scenarios\n\nHere's more information on common migration scenarios for Storybook with Nx. For Storybook specific migrations that are not automatically handled by Nx please refer to the [official Storybook page](https://storybook.js.org/)\n\n- [Upgrading to Storybook 6](/storybook/upgrade-storybook-v6-react)\n- [Migrate to the Nrwl React Storybook Preset](/storybook/migrate-webpack-final-react)\n"
    },
    {
      "id": "overview-angular",
      "name": "Overview (Angular)",
      "file": "shared/guides/storybook/plugin-angular",
      "content": "# Storybook\n\n![Storybook logo](/shared/storybook-logo.png)\n\nStorybook is a development environment for UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.\n\nThis guide will briefly walk you through using Storybook within an Nx workspace.\n\n## Setting Up Storybook\n\n### Add the Storybook plugin\n\n```bash\nyarn add --dev @nrwl/storybook\n```\n\n## Using Storybook\n\n### Generating Storybook Configuration\n\nYou can generate Storybook configuration for an individual project with this command:\n\n```bash\nnx g @nrwl/angular:storybook-configuration project-name\n```\n\n### Running Storybook\n\nServe Storybook using this command:\n\n```bash\nnx run project-name:storybook\n```\n\n### Anatomy of the Storybook setup\n\nWhen running the Nx Storybook generator, it'll configure the Nx workspace to be able to run Storybook seamlessly. It'll create\n\n- a global Storybook configuration\n- a project specific Storybook configuration\n\nThe **global** Storybook configuration allows to set addon-ons or custom webpack configuration at a global level that applies to all Storybook's within the Nx workspace. You can find that folder at `.storybook/` at the root of the workspace.\n\n```treeview\n<workspace name>/\n├── .storybook/\n│   ├── main.js\n│   ├── tsconfig.json\n├── apps/\n├── libs/\n├── nx.json\n├── package.json\n├── README.md\n└── etc...\n```\n\nThe project-specific Storybook configuration is pretty much similar to what you would have for a non-Nx setup of Storybook. There's a `.storybook` folder within the project root folder.\n\n```treeview\n<project root>/\n├── .storybook/\n│   ├── main.js\n│   ├── preview.js\n│   ├── tsconfig.json\n├── src/\n├── README.md\n├── tsconfig.json\n└── etc...\n```\n\n### Using Addons\n\nTo register a [Storybook addon](https://storybook.js.org/addons/) for all storybook instances in your workspace:\n\n1. In `/.storybook/main.js`, in the `addons` array of the `module.exports` object, add the new addon:\n   ```typescript\n   module.exports = {\n   stories: [...],\n   ...,\n   addons: [..., '@storybook/addon-essentials'],\n   };\n   ```\n2. If a decorator is required, in each project's `<project-path>/.storybook/preview.js`, you can export an array called `decorators`.\n\n   ```typescript\n   import someDecorator from 'some-storybook-addon';\n   export const decorators = [someDecorator];\n   ```\n\n**-- OR --**\n\nTo register an [addon](https://storybook.js.org/addons/) for a single storybook instance, go to that project's `.storybook` folder:\n\n1. In `main.js`, in the `addons` array of the `module.exports` object, add the new addon:\n   ```typescript\n   module.exports = {\n   stories: [...],\n   ...,\n   addons: [..., '@storybook/addon-essentials'],\n   };\n   ```\n2. If a decorator is required, in `preview.js` you can export an array called `decorators`.\n\n   ```typescript\n   import someDecorator from 'some-storybook-addon';\n   export const decorators = [someDecorator];\n   ```\n\n### Auto-generate Stories\n\nThe `@nrwl/angular:storybook-configuration` generator has the option to automatically generate `*.stories.ts` files for each component declared in the library.\n\n```treeview\n<some-folder>/\n├── my.component.ts\n└── my.component.stories.ts\n```\n\nYou can re-run it at a later point using the following command:\n\n```bash\nnx g @nrwl/angular:stories <project-name>\n```\n\n### Cypress tests for Stories\n\nBoth `storybook-configuration` generator gives the option to set up an e2e Cypress app that is configured to run against the project's Storybook instance.\n\nTo launch Storybook and run the Cypress tests against the iframe inside of Storybook:\n\n```bash\nnx run project-name-e2e:e2e\n```\n\nThe url that Cypress points to should look like this:\n\n`'/iframe.html?id=buttoncomponent--primary&args=text:Click+me!;padding;style:default'`\n\n- `buttoncomponent` is a lowercase version of the `Title` in the `*.stories.ts` file.\n- `primary` is the name of an individual story.\n- `style=default` sets the `style` arg to a value of `default`.\n\nChanging args in the url query parameters allows your Cypress tests to test different configurations of your component. You can [read the documentation](https://storybook.js.org/docs/angular/writing-stories/args#setting-args-through-the-url) for more information.\n\n### Example Files\n\n**\\*.component.stories.ts file**\n\n```typescript\nimport { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { ButtonComponent } from './button.component';\n\nexport default {\n  title: 'ButtonComponent',\n  component: ButtonComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [],\n    }),\n  ],\n} as Meta<ButtonComponent>;\n\nconst Template: Story<ButtonComponent> = (args: ButtonComponent) => ({\n  props: args,\n});\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  text: 'Click me!',\n  padding: 0,\n  style: 'default',\n};\n```\n\n**Cypress test file**\n\n> Depending on your Cypress version, the file will end with .spec.ts or .cy.ts\n\n```typescript\ndescribe('shared-ui', () => {\n  beforeEach(() =>\n    cy.visit(\n      '/iframe.html?id=buttoncomponent--primary&args=text:Click+me!;padding;style:default'\n    )\n  );\n\n  it('should render the component', () => {\n    cy.get('storybook-trial-button').should('exist');\n  });\n});\n```\n\n## Extra topics for Angular projects\n\n[Here](/storybook/extra-topics-for-angular-projects) you can find some extra topics for configuring Storybook on Angular projects.\n\n## More Documentation\n\nFor more on using Storybook, see the [official Storybook documentation](https://storybook.js.org/docs/angular/get-started/introduction).\n\n### Migration Scenarios\n\nHere's more information on common migration scenarios for Storybook with Nx. For Storybook specific migrations that are not automatically handled by Nx please refer to the [official Storybook page](https://storybook.js.org/)\n\n- [Upgrading to Storybook 6](/storybook/upgrade-storybook-v6-angular)\n- [Migrate to the new Storybook `webpackFinal` config](/storybook/migrate-webpack-final-angular)\n"
    },
    {
      "id": "extra-topics-for-angular-projects",
      "name": "Extra topics for Angular projects",
      "file": "shared/guides/storybook/extra-topics-for-angular-projects",
      "content": "# Extra topics for Angular projects\r\n\r\n## Configuring `storybook` and `build-storybook` targets\r\n\r\nIf you are on Nx version `>=14.1.8`, the Nx Storybook plugin for _Angular_ projects uses the original Storybook executors for Angular (`\"@storybook/angular:start-storybook\"` and `\"@storybook/angular:build-storybook\"`) to serve and build Storybook. That means that you can use the official [Storybook for Angular documentation (expand the \"Troubleshooting\" section)](https://storybook.js.org/docs/angular/get-started/install#troubleshooting) to configure the options for serving and building Storybook. Below are two common scenarios that can come up in Storybook for Angular projects.\r\n\r\n## The `browserTarget` for Angular\r\n\r\n### Setting up `browserTarget`\r\n\r\nIf you're using Storybook in your Angular project, you will notice that `browserTarget` is specified for the `storybook` and `build-storybook` targets, much like it is done for `serve` or other targets. Angular needs the `browserTarget` for Storybook in order to know which configuration to use for the build. If your project is buildable (it has a `build` target, and uses the main Angular builder - `@angular-devkit/build-angular:browser`) the `browserTarget` for Storybook will use the `build` target, if it's not buildable it will use the `build-storybook` target.\r\nYou do not have to do anything manually. Nx will create the configuration for you. Even if you are migrating from an older version of Nx, Nx will make sure to change your `package.json` Storybook targets to match the new schema.\r\n\r\nYou can read more about the `browserTarget` in the [official Angular documentation](https://angular.io/cli/serve).\r\n\r\nYour Storybook targets in your `project.json` will look like this:\r\n\r\n```json\r\n    \"storybook\": {\r\n      \"executor\": \"@storybook/angular:start-storybook\",\r\n      \"options\": {\r\n         ...\r\n        \"browserTarget\": \"my-project:build\"\r\n      },\r\n      ...\r\n    },\r\n    \"build-storybook\": {\r\n      \"executor\": \"@storybook/angular:build-storybook\",\r\n       ...\r\n      \"options\": {\r\n         ...\r\n        \"browserTarget\": \"my-project:build\"\r\n      },\r\n     ...\r\n    }\r\n```\r\n\r\nThis setup instructs Nx to use the configuration under the `build` target of `my-project` when using the `storybook` and `build-storybook` executors.\r\n\r\n### Setting up `projectBuildConfig` for Nx versions `<14.1.8`\r\n\r\n**_Careful: This is for older versions of Nx - for the latest version please look at the section above, about `browserTarget`_**\r\n\r\nIf you are on Nx version `<14.1.8`, you're still using our custom executor, which means that you have to comply by the Nx Storybook schema. This means that the contents of `browserTarget` should be placed in the `projectBuildConfig` property. This is telling Storybook where to get the build configuration from. To know more about the purpose of `browserTarget` (and `projectBuildConfig`) read the section above.\r\n\r\nIf you're using Nx version `>=13.4.6` either in a new Nx workspace, or you migrated your older Nx workspace to Nx version `>=13.4.6`, Nx will automatically add the `projectBuildConfig` property in your projects `project.json` files, for projects that are using Storybook.\r\n\r\nYour Storybook targets in your `project.json` will look like this:\r\n\r\n```json\r\n    \"storybook\": {\r\n      \"executor\": \"@nrwl/storybook:storybook\",\r\n      \"options\": {\r\n         ...\r\n        \"projectBuildConfig\": \"my-project:build-storybook\"\r\n      },\r\n      ...\r\n    },\r\n    \"build-storybook\": {\r\n      \"executor\": \"@nrwl/storybook:build\",\r\n       ...\r\n      \"options\": {\r\n         ...\r\n        \"projectBuildConfig\": \"my-project:build-storybook\"\r\n      },\r\n     ...\r\n    }\r\n```\r\n\r\nThis setup instructs Nx to use the configuration under the `build-storybook` target of `my-project` when using the `storybook` and `build-storybook` executors.\r\n\r\n{% callout type=\"note\" title=\"The defaultProject\" %}\r\nStorybook for Angular needs a default project specified in order to run. The reason is that it uses that default project to read the build configuration from (paths to files to include in the build, and other configurations/settings). In a pure Angular/Storybook setup (**not** an Nx workspace), the Angular application/project would have an `angular.json` file. That file would have a property called `defaultProject`. In an Nx workspace the `defaultProject` property would be specified in the `nx.json` file. Previously, Nx would try to resolve the `defaultProject` of the workspace, and use the build configuration of that project. In most cases, the `defaultProject`'s build configuration would not work for some other project set up with Storybook, since there would most probably be mismatches in paths or other project-specific options.\r\n{% /callout %}\r\n\r\n## Configuring styles and preprocessor options\r\n\r\nAngular supports including extra entry-point files for styles. Also, in case you use Sass, you can add extra base paths that will be checked for imports. In your project's `project.json` file you can use the `styles` and `stylePreprocessorOptions` properties in your `storybook` and `build-storybook` target `options`, as you would in your Storybook or your Angular configurations. If your project is an application, you can add these extra options in your `build` target. Your `storybook` and `build-storybook` `browserTarget` are going to be pointing to the `build` target, so they will pick up these styles from there. Check out the [Angular Workspace Configuration](https://angular.io/guide/workspace-config#styles-and-scripts-configuration) documentation for more information. You can also check the [official Storybook for Angular documentation](https://storybook.js.org/docs/angular/configure/styling-and-css) on working with styles and CSS.\r\n\r\nYour Storybook targets in your `project.json` will look like this:\r\n\r\n```json\r\n    \"storybook\": {\r\n      \"executor\": \"@storybook/angular:start-storybook\",\r\n      \"options\": {\r\n         ...\r\n        \"styles\": [\"some-styles.css\"],\r\n        \"stylePreprocessorOptions\": {\r\n          \"includePaths\": [\"some-style-paths\"]\r\n        }\r\n      },\r\n      ...\r\n    },\r\n    \"build-storybook\": {\r\n      \"executor\": \"@storybook/angular:build-storybook\",\r\n       ...\r\n      \"options\": {\r\n         ...\r\n        \"styles\": [\"some-styles.css\"],\r\n        \"stylePreprocessorOptions\": {\r\n          \"includePaths\": [\"some-style-paths\"]\r\n        }\r\n      },\r\n     ...\r\n    }\r\n```\r\n\r\n{% callout type=\"note\" title=\"Using build-storybook for styles\" %}\r\nChances are, you will most probably need the same `styles` and `stylePreprocessorOptions` for your `storybook` and your `build-storybook` targets. Since you're using `browserTarget`, that means that Storybook will use the `options` of `build` or `build-storybook` when executing the `storybook` task (when compiling your Storybook). In that case, as explained, you _only_ need to add the `styles` or `stylePreprocessorOptions` to the corresponding target (`build` or `build-storybook`) that the `browserTarget` is pointing to. In that case, for example, the configuration shown above would look like this:\r\n\r\n```json\r\n    \"storybook\": {\r\n      \"executor\": \"@storybook/angular:start-storybook\",\r\n      \"options\": {\r\n         ...\r\n         \"browserTarget\": \"my-project:build-storybook\"\r\n      },\r\n      ...\r\n    },\r\n    \"build-storybook\": {\r\n      \"executor\": \"@storybook/angular:build-storybook\",\r\n       ...\r\n      \"options\": {\r\n         ...\r\n        \"browserTarget\": \"my-project:build-storybook\",\r\n        \"styles\": [\"some-styles.css\"],\r\n        \"stylePreprocessorOptions\": {\r\n          \"includePaths\": [\"some-style-paths\"]\r\n        }\r\n      },\r\n     ...\r\n    }\r\n```\r\n\r\n{% /callout %}\r\n\r\n## Moving your project targets to the new (native Storybook) schema\r\n\r\nIf you are on Nx version `<14.1.8` and you want to move to the latest version (or any version `>=14.1.8`) you can use the `nx migrate` command, which will take care of migrating your Storybook targets across all your Angular projects using Storybook to use the new schema, the original Storybook executors for Angular. The configuration changes that you need to make will be handled automatically by Nx, so you will not have to do any manual work.\r\n\r\nIf you have already moved on a version of Nx `>=14.1.8` without using `nx migrate` and now you are having trouble with with your Angular projects using Storybook (eg. `Property 'uiFramework' does not match the schema. '@storybook/angular' should be one of ...`), that means that your targets are still using the old schema and they should change. For that, you can use the [`change-storybook-targets` generator](/packages/storybook/generators/change-storybook-targets) which will take care of changing your `storybook` and `build-storybook` targets across your workspace for your Angular projects using Storybook.\r\n"
    },
    {
      "id": "migrate-webpack-final-react",
      "name": "Migrate to the Nrwl React Storybook Preset",
      "file": "shared/guides/storybook/migrate-webpack-final-react",
      "content": "# Nrwl React Storybook Preset\r\n\r\nNx 12.7 comes with a dedicated Storybook preset for React which drammatically simplifies the Storybook setup and makes sure that Storybook uses the same webpack configuration as your React applications running within an Nx workspace.\r\n\r\n{% youtube\r\nsrc=\"https://www.youtube.com/embed/oUE74McS_NY\"\r\ntitle=\"New in Nx 12.7: React Storybook Preset\"\r\nwidth=\"100%\" /%}\r\n\r\nHere are the main differences to the previous versions of Nx:\r\n\r\n- there's no `webpack.config.js`; Custom webpack configurations can be added in the `webpackFinal` property of the `main.js` file\r\n- the `main.js` file now contains a predefined Storybook preset exported by `@nrwl/react/plugins/storybook`.\r\n\r\nHere's an example of a newly generated `main.js` file:\r\n\r\n```javascript\r\n// project-level .storybook/main.js file\r\nconst rootMain = require('../../../.storybook/main');\r\n\r\nmodule.exports = {\r\n  ...rootMain,\r\n\r\n  core: {\r\n    ...rootMain.core,\r\n    // opt-into Storybook Webpack 5\r\n    builder: 'webpack5'\r\n  }\r\n\r\n  stories: [\r\n    ...rootMain.stories,\r\n    '../src/lib/**/*.stories.mdx',\r\n    '../src/lib/**/*.stories.@(js|jsx|ts|tsx)',\r\n  ],\r\n  addons: [...rootMain.addons, '@nrwl/react/plugins/storybook'],\r\n  webpackFinal: async (config, { configType }) => {\r\n    // apply any global webpack configs that might have been specified in .storybook/main.js\r\n    if (rootMain.webpackFinal) {\r\n      config = await rootMain.webpackFinal(config, { configType });\r\n    }\r\n\r\n    // add your own webpack tweaks if needed\r\n\r\n    return config;\r\n  },\r\n};\r\n```\r\n\r\nAt the Nx workspace root level, the configuration file looks as follows:\r\n\r\n```javascript\r\n// root level .storybook/main.js file\r\nmodule.exports = {\r\n  stories: [],\r\n  addons: ['@storybook/addon-essentials'],\r\n  // uncomment the property below if you want to apply some webpack config globally\r\n  // webpackFinal: async (config, { configType }) => {\r\n  //   // Make whatever fine-grained changes you need that should apply to all storybook configs\r\n\r\n  //   // Return the altered config\r\n  //   return config;\r\n  // },\r\n};\r\n```\r\n\r\n## Migrating\r\n\r\nIf you're upgrading from a lower version of Nx, your old Storybook configuration will still work. New configurations generated will use the new syntax as shown above. The newly generated code will also make sure to extend from a global `webpack.config.js` which might exist in the root-level `.storybook/` directory of your Nx workspace.\r\n\r\nThis gives you the flexibility to incrementally migrate your configurations.\r\n\r\nHere's the step-by-step migration process:\r\n\r\n### 1. adjust the `main.js` file\r\n\r\nRestructure your `main.js` file so that it looks like in the example illustrated above.\r\n\r\nIf you need to keep your root-level `.storybook/webpack.config.js` for now, then make sure you adjust the `main.js` in a way that it properly calls the root-level `webpack.config.js` to inherit all of the global configurations.\r\n\r\n```javascript\r\nconst rootMain = require('../../../.storybook/main');\r\nconst rootWebpackConfig = require('../../../.storybook/webpack.config');\r\n\r\nmodule.exports = {\r\n  ...rootMain,\r\n  ...\r\n  webpackFinal: async (config) => {\r\n    // for backwards compatibility call the `rootWebpackConfig`\r\n    // this can be removed once that one is migrated fully to\r\n    // use the `webpackFinal` property in the `main.js` file\r\n    config = rootWebpackConfig({ config });\r\n\r\n    // add your own webpack tweaks if needed\r\n\r\n    return config;\r\n  },\r\n};\r\n```\r\n\r\n{% callout type=\"note\" title=\"Tip!\" %}\r\nThe easiest way is probably to generate a new library and Storybook configuration and then copy & paste the `main.js`.\r\n{% /callout %}\r\n\r\n### 2. Move any custom webpack configuration to `webpackFinal`\r\n\r\nIn previous versions of Nx a custom `webpack.config.js` was generated with the following content:\r\n\r\n```javascript\r\nmodule.exports = async ({ config, mode }) => {\r\n  config = await rootWebpackConfig({ config, mode });\r\n\r\n  const tsPaths = new TsconfigPathsPlugin({\r\n    configFile: './tsconfig.base.json',\r\n  });\r\n\r\n  config.resolve.plugins\r\n    ? config.resolve.plugins.push(tsPaths)\r\n    : (config.resolve.plugins = [tsPaths]);\r\n\r\n  // Found this here: https://github.com/nrwl/nx/issues/2859\r\n  // And copied the part of the solution that made it work\r\n\r\n  const svgRuleIndex = config.module.rules.findIndex((rule) => {\r\n    const { test } = rule;\r\n\r\n    return test.toString().startsWith('/\\\\.(svg|ico');\r\n  });\r\n  config.module.rules[svgRuleIndex].test =\r\n    /\\.(ico|jpg|jpeg|png|gif|eot|otf|webp|ttf|woff|woff2|cur|ani|pdf)(\\?.*)?$/;\r\n\r\n  config.module.rules.push(\r\n    {\r\n      test: /\\.(png|jpe?g|gif|webp)$/,\r\n      loader: require.resolve('url-loader'),\r\n      options: {\r\n        limit: 10000, // 10kB\r\n        name: '[name].[hash:7].[ext]',\r\n      },\r\n    },\r\n    {\r\n      test: /\\.svg$/,\r\n      oneOf: [\r\n        // If coming from JS/TS file, then transform into React component using SVGR.\r\n        {\r\n          issuer: {\r\n            test: /\\.[jt]sx?$/,\r\n          },\r\n          use: [\r\n            {\r\n              loader: require.resolve('@svgr/webpack'),\r\n              options: {\r\n                svgo: false,\r\n                titleProp: true,\r\n                ref: true,\r\n              },\r\n            },\r\n            {\r\n              loader: require.resolve('url-loader'),\r\n              options: {\r\n                limit: 10000, // 10kB\r\n                name: '[name].[hash:7].[ext]',\r\n                esModule: false,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        // Fallback to plain URL loader.\r\n        {\r\n          use: [\r\n            {\r\n              loader: require.resolve('url-loader'),\r\n              options: {\r\n                limit: 10000, // 10kB\r\n                name: '[name].[hash:7].[ext]',\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    }\r\n  );\r\n\r\n  return config;\r\n};\r\n```\r\n\r\nSuch webpack file is no more needed as the `@nrwl/react/plugins/storybook` now takes care of it.\r\n\r\nIn case you made custom modifications to the `webpack.config.js` file, you need to move them over to the `main.js` `webpackFinal` property and then delete the `webpack.config.js`.\r\n\r\n### 3. Remove the root-level `.storybook/webpack.config.js` file\r\n\r\nOnce you've migrated all your libraries, you can think about removing the root-level `.storybook/webpack.config.js` file and migrate any custom configuration there to `.storybook/main.js` `webpackFinal` property in the very same folder.\r\n\r\n### 4. Opting in to Webpack 5\r\n\r\nIf you choose to opt-in to Webpack 5, by specifying `builder: 'webpack5'` in your project's `.storybook/main.(js|ts)` (as shown above, in the example of a newly generated `main.js` file), don't forget to add the Storybook dependencies for Webpack 5 to work:\r\n\r\n```shell\r\nyarn add -D @storybook/builder-webpack5 @storybook/manager-webpack5\r\n```\r\n\r\nor if you're using `npm`:\r\n\r\n```shell\r\nnpm install --save-dev @storybook/builder-webpack5 @storybook/manager-webpack5\r\n```\r\n"
    },
    {
      "id": "migrate-webpack-final-angular",
      "name": "Migrate to the Nrwl Angular Storybook Preset",
      "file": "shared/guides/storybook/migrate-webpack-final-angular",
      "content": "# Storybook Webpack Migration\r\n\r\nNx 12.7 as in combination with Storybook v6.3 doesn't need a custom `webpack.config.js` which was previously required and auto-generated by Nx.\r\n\r\nHere are the main differences to the previous setups:\r\n\r\n- there's no `webpack.config.js`\r\n- custom webpack configurations can be added in the `webpackFinal` property of the `main.js` file\r\n\r\nHere's an example of a newly generated `main.js` file:\r\n\r\n```javascript\r\n// project-level .storybook/main.js file\r\nconst rootMain = require('../../../.storybook/main');\r\n\r\nmodule.exports = {\r\n  ...rootMain,\r\n\r\n  core: { ...rootMain.core, builder: 'webpack5' },\r\n\r\n  stories: [\r\n    ...rootMain.stories,\r\n    '../src/lib/**/*.stories.mdx',\r\n    '../src/lib/**/*.stories.@(js|jsx|ts|tsx)',\r\n  ],\r\n  addons: [...rootMain.addons],\r\n  webpackFinal: async (config, { configType }) => {\r\n    // apply any global webpack configs that might have been specified in .storybook/main.js\r\n    if (rootMain.webpackFinal) {\r\n      config = await rootMain.webpackFinal(config, { configType });\r\n    }\r\n\r\n    // add your own webpack tweaks if needed\r\n\r\n    return config;\r\n  },\r\n};\r\n```\r\n\r\nAt the Nx workspace root level, the configuration file looks as follows:\r\n\r\n```javascript\r\n// root level .storybook/main.js file\r\nmodule.exports = {\r\n  stories: [],\r\n  addons: ['@storybook/addon-essentials'],\r\n  // uncomment the property below if you want to apply some webpack config globally\r\n  // webpackFinal: async (config, { configType }) => {\r\n  //   // Make whatever fine-grained changes you need that should apply to all storybook configs\r\n\r\n  //   // Return the altered config\r\n  //   return config;\r\n  // },\r\n};\r\n```\r\n\r\n## Migrating\r\n\r\nIf you're upgrading from a lower version of Nx, your old Storybook configuration will still work. New configurations generated will use the new syntax as shown above. The newly generated code will also make sure to extend from a global `webpack.config.js` which might exist in the root-level `.storybook/` directory of your Nx workspace.\r\n\r\nThis gives you the flexibility to incrementally migrate your configurations.\r\n\r\nHere's the step-by-step migration process:\r\n\r\n### 1. adjust the `main.js` file\r\n\r\nRestructure your `main.js` file so that it looks like in the example illustrated above.\r\n\r\nIf you need to keep your root-level `.storybook/webpack.config.js` for now, then make sure you adjust the `main.js` in a way that it properly calls the root-level `webpack.config.js` to inherit all of the global configurations.\r\n\r\n```javascript\r\nconst rootMain = require('../../../.storybook/main');\r\nconst rootWebpackConfig = require('../../../.storybook/webpack.config');\r\n\r\nmodule.exports = {\r\n  ...rootMain,\r\n  ...\r\n  webpackFinal: async (config) => {\r\n    // for backwards compatibility call the `rootWebpackConfig`\r\n    // this can be removed once that one is migrated fully to\r\n    // use the `webpackFinal` property in the `main.js` file\r\n    config = rootWebpackConfig({ config });\r\n\r\n    // add your own webpack tweaks if needed\r\n\r\n    return config;\r\n  },\r\n};\r\n```\r\n\r\n{% callout type=\"note\" title=\"Tip!\" %}\r\nThe easiest way is probably to generate a new library and Storybook configuration and then copy & paste the `main.js`.\r\n{% /callout %}\r\n\r\n### 2. Move any custom webpack configuration to `webpackFinal`\r\n\r\nIn previous versions of Nx a custom `webpack.config.js` was generated with the following content:\r\n\r\n```javascript\r\nconst TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');\r\nconst rootWebpackConfig = require('../../../.storybook/webpack.config');\r\n/**\r\n * Export a function. Accept the base config as the only param.\r\n *\r\n * @param {Parameters<typeof rootWebpackConfig>[0]} options\r\n */\r\nmodule.exports = async ({ config, mode }) => {\r\n  config = await rootWebpackConfig({ config, mode });\r\n\r\n  const tsPaths = new TsconfigPathsPlugin({\r\n    configFile: './tsconfig.base.json',\r\n  });\r\n\r\n  config.resolve.plugins\r\n    ? config.resolve.plugins.push(tsPaths)\r\n    : (config.resolve.plugins = [tsPaths]);\r\n\r\n  return config;\r\n};\r\n```\r\n\r\nSuch webpack file is no more needed as Storybook v6.3+ has proper TypeScript support already built-in now.\r\n\r\nIn case you made custom modifications to the `webpack.config.js` file, you need to move them over to the `main.js` `webpackFinal` property and then delete the `webpack.config.js`.\r\n\r\n### 3. Remove the root-level `.storybook/webpack.config.js` file\r\n\r\nOnce you've migrated all your libraries, you can think about removing the root-level `.storybook/webpack.config.js` file and migrate any custom configuration there to `.storybook/main.js` `webpackFinal` property in the very same folder.\r\n\r\n### 4. Opting in to Webpack 5\r\n\r\nIf you choose to opt-in to Webpack 5, by specifying `builder: 'webpack5'` in your project's `.storybook/main.(js|ts)` (as shown above, in the example of a newly generated `main.js` file), don't forget to add the Storybook dependencies for Webpack 5 to work:\r\n\r\n```shell\r\nyarn add -D @storybook/builder-webpack5 @storybook/manager-webpack5\r\n```\r\n\r\nor if you're using `npm`:\r\n\r\n```shell\r\nnpm install --save-dev @storybook/builder-webpack5 @storybook/manager-webpack5\r\n```\r\n"
    },
    {
      "id": "upgrade-storybook-v6-react",
      "name": "Upgrading to Storybook 6 (React)",
      "file": "shared/guides/storybook/storybook-v6-react",
      "content": "# Upgrading to Storybook 6 (and Nx versions >10.1.x and <14.0.0)\r\n\r\n_Disclaimer: From Nx 14.0.0 and on, Nx does not support Storybook v.5. If your workspace is on a version of Nx older than Nx 14, then you will be able to use the generators described in this guide. If you're using Nx >14, then you will already have been automatically migrated to Storybook 6._\r\n\r\nNx now comes with [Storybook version 6](https://storybook.js.org/releases/6.0). Chances are, if you used Nx version `10.1.x` or older with Storybook, you are using [Storybook version 5.3](https://storybook.js.org/releases/5.3) with configuration files of [Storybook version 5.2](https://storybook.js.org/releases/5.2).\r\n\r\nNx version `10.2.x` will continue to support Storybook version `5.2.x`, however newer versions of Nx will only support Storybook version `6` (and on).\r\n\r\nWhen you are running the Nx workspace migration script, your Storybook instances and configurations across your apps and libraries will NOT be migrated automatically. We chose not to migrate your Storybook instances and configurations across your apps and libraries automatically, since there a number of breaking changes that Storybook introduced in versions `5.3` and `6.0`, and making decisions on what to migrate automatically would risk the integrity of your code.\r\n\r\nInstead, when you choose to migrate from Nx versions `<10.1.x` to Nx versions `>10.2.x` (using the Nx migration script - `nx migrate`) we will keep your Storybook packages and Storybook instances and configurations intact. We suggest that you do the migration on your own, using the guide below, with all the references to the official Storybook migration guides. Look at the use cases below, and follow the one that matches your case.\r\n\r\n## Use Cases\r\n\r\n### Use case 1: Create an Nx workspace from scratch using the latest version of Nx\r\n\r\nIf you are creating an Nx workspace using the latest version of Nx, the latest version of Storybook (version 6) will be used as well. You do not need to do anything.\r\n\r\n### Use case 2: I already have an Nx workspace that does NOT use Storybook and I want to migrate to the latest Nx\r\n\r\nIf you already have an Nx workspace with a previous version of Nx that does NOT use Storybook, and you migrate to the latest Nx using the migrate scripts provided by Nx, and then, after the migration to the latest Nx, you choose to add Storybook, the latest version of Storybook will be used. You do not need to do anything.\r\n\r\n### Use case 3: I already have an Nx workspace with Storybook and I want to migrate to the latest Nx\r\n\r\nIn that case, when you run the Nx migration scripts, the scripts will ignore the Storybook packages, the Storybook configuration files, the Storybook instances in your apps and libraries, and all the generated stories. If you continue to add Storybook configurations and Storybook instances to new libraries and applications, then the version of Storybook that you already have will be used (most probably, if you have not changed anything manually, that version will be `5.3.9` using, however, the configuration files of `5.2`). You will have to do the [upgrade to the latest Storybook on your own, manually](#upgrading-to-storybook-6-manually). After that, Nx will use that version, and configure all new Storybook instances using the new version.\r\n\r\n## Upgrading to Storybook 6 using the Nx migration generator\r\n\r\n### Some info about the generator\r\n\r\nThe `@nrwl/react:storybook-migrate-defaults-5-to-6` generator will not exactly do a migration. It will perform the following actions:\r\n\r\n- It will generate new Storybook configuration files using the new (`>6.x`) Storybook way. The way it will do that is, it will look in all the `project.json` files and it will find all the projects that have a `Storybook` configuration. Using the `configFolder` path provided there, it will go and generate new Storybook instances in all these paths. Finally, it will generate a new Storybook instance at the root directory.\r\n\r\n- If you choose to `keepOld`, then it will add all your existing Storybook configuration files into another folder labeled `.old_storybook`.\r\n\r\n- It will update all the Storybook-related (`@storybook/*`) packages in your `package.json`.\r\n\r\n### How to use the generator\r\n\r\nThat way, you can have working Storybook instances for all your projects just by running\r\n\r\n```bash\r\nnx g @nrwl/react:storybook-migrate-defaults-5-to-6\r\n```\r\n\r\n### What if I had made changes to the defaults?\r\n\r\nIn case you had made customizations to the default Storybook configurations, you can then manually change each of your Storybook instance configuration files using the official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) to make sure you use the new syntax. Your old configuration files are available to you to use as a reference.\r\n\r\nPlease check out this official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) article, as well as the [detailed guides here](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-53x-to-60x).\r\n\r\n### What if I am not ready to change everything at once?\r\n\r\nThe generator gives you the option to migrate one project at a time. You can provide the `--name=PROJECT_NAME` flag, and then the generator will **only** generate new files for the specified project.\r\n\r\nPlease note that this option will NOT update all the Storybook-related (`@storybook/*`) packages in your `package.json`, or the root Storybook folder. The reason is that if you want to do the migration gradually, one project at a time, you want your old, existing, projects, to still work. That way, you will still be able to run your old, non-migrated Storybook projects. However, you will not be able to run any migrated Storbook projects. Once you have migrated all your Storybook projects, you can run `nx g @nrwl/react:storybook-migrate-defaults-5-to-6` once again, and the generator will take care of updating all the Storybook-related (`@storybook/*`) packages in your `package.json` and it will also generate the new Storybook files for the root Storybook directory.\r\n\r\n### General tip:\r\n\r\n**Commit any changes you have locally**. We would suggest that you start the migration with a clean git history, in case anything goes wrong.\r\n\r\n## Upgrading to Storybook 6 manually\r\n\r\nThere is really no great reason for doing the migration completely manually. The `@nrwl/react:storybook-migrate-defaults-5-to-6` generator [will take care of Steps 1, 2 and 3](#upgrading-to-storybook-6-using-the-nx-migration-generator). What you will need to do after running the generator is that you have to manually migrate any custom changes you had done to the default Storybook configuration files that were automatically generated by Nx when you first used Nx Storybook. To do the manual migration you should use the official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) article, as well as the [detailed guides here](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-53x-to-60x).\r\n\r\nHowever, if you still want to do everything manually, these are the steps you should follow:\r\n\r\n### Step 0:\r\n\r\n**Commit any changes you have locally**. We would suggest that you start the migration with a clean git history, in case anything goes wrong.\r\n\r\n### Step 1: Changing the configuration files from version 5.2 to 5.3\r\n\r\nThe most noticeable change in Storybook versions newer than `5.2` is that the configuration files have changed names and content.\r\nQuoting from the [official Storybook migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-52x-to-53x):\r\n\r\n- `presets.js` has been renamed to `main.js`. `main.js` is the main point of configuration for storybook.\r\n- `config.js` has been renamed to `preview.js`. `preview.js` configures the \"preview\" iframe that renders your components.\r\n- `addons.js` has been renamed to `manager.js`. `manager.js` configures Storybook's \"manager\" UI that wraps the preview, and also configures addons panel.\r\n\r\nPlease follow the [official Storybook version 5.2.x to 5.3.x migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-52x-to-53x) to change your files accordingly.\r\n\r\n### Step 2: Going from version 5.3 to 6.0\r\n\r\nPlease check out this official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) article, as well as the [detailed guides here](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-53x-to-60x).\r\n\r\n- One big change in Storybook version `6` is that it has **built-in Typescript support**. This means that you can remove Typescript configurations from your configuration files.\r\n- Please also **check that your stories match any differences in syntax** introduced in versions `5.3` and `6.0`.\r\n\r\n### Step 3: Upgrade all `@storybook/*` packages in your project\r\n\r\nCheck your `package.json` file for all `@storybook` packages. Install the latest versions of these, using `yarn`:\r\n\r\nFor example:\r\n\r\n```bash\r\nyarn add --dev @storybook/react@latest\r\n```\r\n\r\n### Step 4: Check that everything works as expected\r\n\r\nCheck that everything works as expected. If you are still having trouble, you can submit you issue in the [GitHub Nx repo](https://github.com/nrwl/nx). We wish you luck!\r\n\r\n### Sample files for manual upgrade\r\n\r\nIf you have not changed the content of the files which the `storybook-configuration` generator produced, you can use the following samples to migrate to Storybook `6`:\r\n\r\n### Configuring the root `./storybook` directory\r\n\r\n- In the root `./storybook` directory, create a new file named `main.js` with the following content:\r\n\r\n```typescript\r\nmodule.exports = {\r\n  stories: [],\r\n  addons: ['@storybook/addon-essentials'],\r\n};\r\n```\r\n\r\n- If you have any addons in the `addons.js` file, add them in the `addons` array in the `main.js` file. If you are using the default generated files without any changes, you should not have any addons. You can now delete the `addons.js` file.\r\n\r\n- The other two files remain unchanged.\r\n\r\n### Configuring the Storybook instances across apps and libraries - the library-specific `./storybook` directories\r\n\r\n- In the library `./storybook` directory, create a new file named `main.js` with the following content:\r\n\r\n```typescript\r\nconst lib_main_module = require('../../.storybook/main');\r\n\r\nlib_main_module.stories.push('../src/lib/**/*.stories.mdx');\r\nlib_main_module.stories.push('../src/lib/**/*.stories.@(js|jsx|ts|tsx)');\r\nmodule.exports = lib_main_module;\r\n```\r\n\r\nPlease take extra care making sure that the path to the root `./storybook` directory provided in the first line is correct.\r\n\r\n- If you have any addons in the `addons.js` file, add them in the `addons` array in the `main.js` file. You can add any addons in the `addons` module array using the following syntax:\r\n\r\n```typescript\r\nlib_main_module.addons.push('<YOUR_ADDON_HERE>');\r\n```\r\n\r\nAfter you add any addons in the `main.js` file, you can safely delete the `addons.js` file. If you are using the default generated files without any changes, your `addons.js` file should be empty (but an import line, referencing the root `addons.js` file).\r\n\r\n- Rename the file `config.js` to `preview.js` and remove the last line where your stories paths are configured. Now, the contents of the `preview.js` file will look like this:\r\n\r\n```typescript\r\nimport { addDecorator } from '@storybook/react';\r\n\r\naddDecorator(<YourDecorator>);\r\n```\r\n\r\n- Modify the contents of `webpack.config.js`. Remove the following lines, which are the TypeScript configuration, which is not needed by Storybook any more:\r\n\r\n```typescript\r\nconfig.resolve.extensions.push('.ts', '.tsx');\r\nconfig.module.rules.push({\r\n  test: /\\.(ts|tsx)$/,\r\n  loader: require.resolve('babel-loader'),\r\n  options: {\r\n    presets: [\r\n      '@babel/preset-env',\r\n      '@babel/preset-react',\r\n      '@babel/preset-typescript',\r\n    ],\r\n  },\r\n});\r\n```\r\n\r\n### Check final folder structure\r\n\r\nYour folder structure should now look like this:\r\n\r\n```treeview\r\n<workspace name>/\r\n├── .storybook/\r\n│   ├── main.js\r\n│   ├── tsconfig.json\r\n│   └── webpack.config.js\r\n├── apps/\r\n├── libs/\r\n│    └── <library name>/\r\n│       ├── .storybook/\r\n│       │   ├── main.js\r\n│       │   ├── tsconfig.json\r\n│       │   └── webpack.config.js\r\n│       ├── src/\r\n│       ├── README.md\r\n│       ├── tsconfig.json\r\n│       └── etc...\r\n├── nx.json\r\n├── package.json\r\n├── README.md\r\n└── etc...\r\n```\r\n"
    },
    {
      "id": "upgrade-storybook-v6-angular",
      "name": "Upgrading to Storybook 6 (Angular)",
      "file": "shared/guides/storybook/storybook-v6-angular",
      "content": "# Upgrading to Storybook 6 (and Nx versions >10.1.x and <14.0.0)\r\n\r\n_Disclaimer: From Nx 14.0.0 and on, Nx does not support Storybook v.5. If your workspace is on a version of Nx older than Nx 14, then you will be able to use the generators described in this guide. If you're using Nx >14, then you will already have been automatically migrated to Storybook 6._\r\n\r\nNx now comes with [Storybook version 6](https://storybook.js.org/releases/6.0). Chances are, if you used Nx version `10.1.x` or older with Storybook, you are using [Storybook version 5.3](https://storybook.js.org/releases/5.3) with configuration files of [Storybook version 5.2](https://storybook.js.org/releases/5.2).\r\n\r\nNx version `10.2.x` will continue to support Storybook version `5.2.x`, however newer versions of Nx will only support Storybook version `6` (and on).\r\n\r\nWhen you are running the Nx workspace migration script, your Storybook instances and configurations across your apps and libraries will NOT be migrated automatically. We chose not to migrate your Storybook instances and configurations across your apps and libraries automatically, since there a number of breaking changes that Storybook introduced in versions `5.3` and `6.0`, and making decisions on what to migrate automatically would risk the integrity of your code.\r\n\r\nInstead, when you choose to migrate from Nx versions `<10.1.x` to Nx versions `>10.2.x` (using the Nx migration script - `nx migrate`) we will keep your Storybook packages and Storybook instances and configurations intact. We suggest that you do the migration on your own, using the guide below, with all the references to the official Storybook migration guides. Look at the use cases below, and follow the one that matches your case.\r\n\r\n## Use Cases\r\n\r\n### Use case 1: Create an Nx workspace from scratch using the latest version of Nx\r\n\r\nIf you are creating an Nx workspace using the latest version of Nx, the latest version of Storybook (version 6) will be used as well. You do not need to do anything.\r\n\r\n### Use case 2: I already have an Nx workspace that does NOT use Storybook and I want to migrate to the latest Nx\r\n\r\nIf you already have an Nx workspace with a previous version of Nx that does NOT use Storybook, and you migrate to the latest Nx using the migrate scripts provided by Nx, and then, after the migration to the latest Nx, you choose to add Storybook, the latest version of Storybook will be used. You do not need to do anything.\r\n\r\n### Use case 3: I already have an Nx workspace with Storybook and I want to migrate to the latest Nx\r\n\r\nIn that case, when you run the Nx migration scripts, the scripts will ignore the Storybook packages, the Storybook configuration files, the Storybook instances in your apps and libraries, and all the generated stories. If you continue to add Storybook configurations and Storybook instances to new libraries and applications, then the version of Storybook that you already have will be used (most probably, if you have not changed anything manually, that version will be `5.3.9` using, however, the configuration files of `5.2`). You will have to do the [upgrade to the latest Storybook on your own, manually](#upgrading-to-storybook-6-manually). After that, Nx will use that version, and configure all new Storybook instances using the new version.\r\n\r\n## Upgrading to Storybook 6 using the Nx migration generator\r\n\r\n### Some info about the generator\r\n\r\nThe `@nrwl/angular:storybook-migrate-defaults-5-to-6` generator will not exactly do a migration. It will perform the following actions:\r\n\r\n- It will generate new Storybook configuration files using the new (`>6.x`) Storybook way. The way it will do that is, it will look in all the `project.json` files and it will find all the projects that have a `Storybook` configuration. Using the `configFolder` path provided there, it will go and generate new Storybook instances in all these paths. Finally, it will generate a new Storybook instance at the root directory.\r\n\r\n- If you choose to `keepOld`, then it will add all your existing Storybook configuration files into another folder labeled `.old_storybook`.\r\n\r\n- It will update all the Storybook-related (`@storybook/*`) packages in your `package.json`.\r\n\r\n### How to use the generator\r\n\r\nThat way, you can have working Storybook instances for all your projects just by running\r\n\r\n```bash\r\nnx g @nrwl/angular:storybook-migrate-defaults-5-to-6\r\n```\r\n\r\n### What if I had made changes to the defaults?\r\n\r\nIn case you had made customizations to the default Storybook configurations, you can then manually change each of your Storybook instance configuration files using the official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) to make sure you use the new syntax. Your old configuration files are available to you to use as a reference.\r\n\r\nPlease check out this official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) article, as well as the [detailed guides here](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-53x-to-60x).\r\n\r\n### What if I am not ready to change everything at once?\r\n\r\nThe generator gives you the option to migrate one project at a time. You can provide the `--name=PROJECT_NAME` flag, and then the generator will **only** generate new files for the specified project.\r\n\r\nPlease note that this option will NOT update all the Storybook-related (`@storybook/*`) packages in your `package.json`, or the root Storybook folder. The reason is that if you want to do the migration gradually, one project at a time, you want your old, existing, projects, to still work. That way, you will still be able to run your old, non-migrated Storybook projects. However, you will not be able to run any migrated Storbook projects. Once you have migrated all your Storybook projects, you can run `nx g @nrwl/angular:storybook-migrate-defaults-5-to-6` once again, and the generator will take care of updating all the Storybook-related (`@storybook/*`) packages in your `package.json` and it will also generate the new Storybook files for the root Storybook directory.\r\n\r\n### General tip:\r\n\r\n**Commit any changes you have locally**. We would suggest that you start the migration with a clean git history, in case anything goes wrong.\r\n\r\n## Upgrading to Storybook 6 manually\r\n\r\nThere is really no great reason for doing the migration completely manually. The `@nrwl/angular:storybook-migrate-defaults-5-to-6` generator [will take care of Steps 1, 2 and 3](#upgrading-to-storybook-6-using-the-nx-migration-generator). What you will need to do after running the generator is that you have to manually migrate any custom changes you had done to the default Storybook configuration files that were automatically generated by Nx when you first used Nx Storybook. To do the manual migration you should use the official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) article, as well as the [detailed guides here](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-53x-to-60x).\r\n\r\nHowever, if you still want to do everything manually, these are the steps you should follow:\r\n\r\n### Step 0:\r\n\r\n**Commit any changes you have locally**. We would suggest that you start the migration with a clean git history, in case anything goes wrong.\r\n\r\n### Step 1: Changing the configuration files from version 5.2 to 5.3\r\n\r\nThe most noticeable change in Storybook versions newer than `5.2` is that the configuration files have changed names and content.\r\nQuoting from the [official Storybook migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-52x-to-53x):\r\n\r\n- `presets.js` has been renamed to `main.js`. `main.js` is the main point of configuration for storybook.\r\n- `config.js` has been renamed to `preview.js`. `preview.js` configures the \"preview\" iframe that renders your components.\r\n- `addons.js` has been renamed to `manager.js`. `manager.js` configures Storybook's \"manager\" UI that wraps the preview, and also configures addons panel.\r\n\r\nPlease follow the [official Storybook version 5.2.x to 5.3.x migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-52x-to-53x) to change your files accordingly.\r\n\r\nIf you are using Storybook using only the generated files after running the `storybook-configuration` generator, things might be easier for you. Please check the [sample files for a manual upgrade](#sample-files-for-manual-upgrade).\r\n\r\n### Step 2: Going from version 5.3 to 6.0\r\n\r\nPlease check out this official [Storybook 6 Migration Guide](https://medium.com/storybookjs/storybook-6-migration-guide-200346241bb5) article, as well as the [detailed guides here](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-53x-to-60x).\r\n\r\n- One big change in Storybook version `6` is that it has **built-in Typescript support**. This means that you can remove Typescript configurations from your configuration files.\r\n- Please also **check that your stories match any differences in syntax** introduced in versions `5.3` and `6.0`.\r\n\r\n### Step 3: Upgrade all `@storybook/*` packages in your project\r\n\r\nCheck your `package.json` file for all `@storybook` packages. Install the latest versions of these, using `yarn`:\r\n\r\nFor example:\r\n\r\n```bash\r\nyarn add --dev @storybook/angular@latest\r\n```\r\n\r\n### Step 4: Check that everything works as expected\r\n\r\nCheck that everything works as expected. If you are still having trouble, you can submit you issue in the [GitHub Nx repo](https://github.com/nrwl/nx). We wish you luck!\r\n\r\n## Sample files for manual upgrade\r\n\r\nIf you have not changed the content of the files which the `storybook-configuration` generator produced, you can use the following samples to migrate to Storybook `6`:\r\n\r\n### Configuring the root `./storybook` directory\r\n\r\n- In the root `./storybook` directory, create a new file named `main.js` with the following content:\r\n\r\n```typescript\r\nmodule.exports = {\r\n  stories: [],\r\n  addons: ['@storybook/addon-essentials'],\r\n};\r\n```\r\n\r\n- If you have any addons in the `addons.js` file, add them in the `addons` array in the `main.js` file. If you are using the default generated files without any changes, you should not have any addons. You can now delete the `addons.js` file.\r\n\r\n- The other two files remain unchanged.\r\n\r\n### Configuring the Storybook instances across apps and libraries - the library-specific `./storybook` directories\r\n\r\n- In the library `./storybook` directory, create a new file named `main.js` with the following content:\r\n\r\n```typescript\r\nconst lib_main_module = require('../../.storybook/main');\r\n\r\nlib_main_module.stories.push('../src/lib/**/*.stories.mdx');\r\nlib_main_module.stories.push('../src/lib/**/*.stories.@(js|jsx|ts|tsx)');\r\nmodule.exports = lib_main_module;\r\n```\r\n\r\nPlease take extra care making sure that the path to the root `./storybook` directory provided in the first line is correct.\r\n\r\n- If you have any addons in the `addons.js` file, add them in the `addons` array in the `main.js` file. You can add any addons in the `addons` module array using the following syntax:\r\n\r\n```typescript\r\nlib_main_module.addons.push('<YOUR_ADDON_HERE>');\r\n```\r\n\r\nAfter you add any addons in the `main.js` file, you can safely delete the `addons.js` file. If you are using the default generated files without any changes, your `addons.js` file should be empty (but an import line, referencing the root `addons.js` file).\r\n\r\n- Rename the file `config.js` to `preview.js` and remove the last line where your stories paths are configured. Now, the contents of the `preview.js` file will look like this:\r\n\r\n```typescript\r\nimport { addDecorator } from '@storybook/angular';\r\nimport { YourDecorator } from '@storybook/<something>';\r\n\r\naddDecorator(YourDecorator);\r\n```\r\n\r\n- Modify the contents of `webpack.config.js`. Remove the following lines, which are the TypeScript configuration, which is not needed by Storybook any more:\r\n\r\n```typescript\r\nconfig.resolve.extensions.push('.ts', '.tsx');\r\nconfig.module.rules.push({\r\n  test: /\\.(ts|tsx)$/,\r\n  loader: require.resolve('babel-loader'),\r\n  options: {\r\n    presets: [\r\n      '@babel/preset-env',\r\n      '@babel/preset-react',\r\n      '@babel/preset-typescript',\r\n    ],\r\n  },\r\n});\r\n```\r\n\r\n### Check final folder structure\r\n\r\nYour folder structure should now look like this:\r\n\r\n```treeview\r\n<workspace name>/\r\n├── .storybook/\r\n│   ├── main.js\r\n│   ├── tsconfig.json\r\n│   └── webpack.config.js\r\n├── apps/\r\n├── libs/\r\n│    └── <library name>/\r\n│       ├── .storybook/\r\n│       │   ├── main.js\r\n│       │   ├── tsconfig.json\r\n│       │   └── webpack.config.js\r\n│       ├── src/\r\n│       ├── README.md\r\n│       ├── tsconfig.json\r\n│       └── etc...\r\n├── nx.json\r\n├── package.json\r\n├── README.md\r\n└── etc...\r\n```\r\n"
    },
    {
      "id": "storybook-composition-setup",
      "name": "Setting up Storybook Composition with Nx",
      "file": "shared/guides/storybook/storybook-composition-setup",
      "content": "# Setting up Storybook Composition with Nx\n\n## What is Storybook Composition\n\nAs explained in the [Storybook official docs](https://storybook.js.org/docs/angular/workflows/storybook-composition), Storybook Composition allows you to embed components from any Storybook inside your local Storybook. If you want to learn more about Storybook Composition, please take a look at the following articles, which explain it in detail:\n\n- [Storybook Composition - Chromatic blog](https://www.chromatic.com/blog/storybook-composition/)\n- [Storybook Composition - Storybook docs](https://storybook.js.org/docs/angular/workflows/storybook-composition)\n\n## How it works\n\nIn essence, you have a Storybook running, which will be the host of the embeded Storybooks as well. Then, you provide this \"host\" Storybook with a URL of a live/running Storybook. The composed Storybook is then displayed in a new Canvas iframe as part of the host Storybook, and is listed on the left-hand-side stories inventory, too. You can read more about this in the docs listed above.\n\n## How to use it\n\nAll you need is a URL of a live Storybook, and a \"host\" Storybook. In the `.storybook/main.js` file of the \"host\" Storybook, inside `module.exports` you add a new `refs` attribute, which will contain the link(s) for the composed Storybook(s).\n\nIn the example below, we have a host Storybook running on local port 4400 (http://localhost:4400) - not displayed here. In it, we want to compose three other Storybooks. The \"one-composed\" and \"two-composed\", running on local ports `4401` and `4402` accordingly, as well as the [Storybook website's Storybook](https://next--storybookjs.netlify.app/official-storybook) which is live on the address that you see.\n\n```javascript\n// .storybook/main.js of our Host Storybook - assuming it's running on port 4400\nmodule.exports = {\n  ...,\n  refs: {\n    'one-composed': {\n      title: 'One composed',\n      url: 'http://localhost:4401',\n    },\n    'two-composed': {\n      title: 'Two composed',\n      url: 'http://localhost:4402',\n    },\n    'storybook-website-storybook': {\n      title: 'The Storybook of the Storybook website',\n      url: 'https://next--storybookjs.netlify.app/official-storybook/',\n    },\n  },\n};\n```\n\nYou can always read more in the [official Storybook docs](https://storybook.js.org/docs/angular/workflows/storybook-composition#compose-published-storybooks).\n\n## How to use it in Nx\n\nIt's quite easy to use this feature, in Nx and in general, since you do not need to make any code changes, you just need to have the \"composed\" Storybook instances (the ones you need to \"compose\") running, choose a \"host\" Storybook, and just add the composed Storybooks in it's `.storybook/main.js` file.\n\nNx provides the [`run-many`](https://nx.dev/l/a/cli/run-many) command, which will allow you to easily run multiple Storybooks at the same time. You need to run the `run-many` command with the parallel flag (eg. `--parallel=3`), because you want to run all your Storybooks in parallel. You can change the value of the `parallel` flag to be of as many Storybooks you want to run in parallel as you need. However, be **very carefull** with putting large numbers in this\nflag, since it can cause big delays or get stuck. You can play around and adjust that number to one your machine runs comfortably with. Keep in mind that you can add in this feature however many live/public Storybooks as you need (Storybooks that you do not run locally).\n\nIn order to get get it working for you, you need to two two things:\n\n1. Make sure your \"composed\" Storybook instances are running. For that you can do:\n\n```bash\nnx run-many --target=storybook --projects=one-composed,two-composed,three-composed --parallel=3\n```\n\n2. Start your host Storybook in another tab of your terminal:\n\n```bash\nnx storybook main-host\n```\n\nBefore doing the above steps to actually compose our Storybook instances under the **`main-host`** project, we would need to do the following adjustments to our workspace:\n\n### Adjust the Storybook ports in `project.json`\n\nTake a look in your `project.json` file of each one of your projects (eg. for the `main-host` project, you can find it in the path `apps/main-host/project.json`).\nIn your project's targets, in the `storybook` target, you will notice that the default port that Nx assigns to your projects' Storybook is always `4400`:\n\n```json\n{\n  ...\n  \"targets\": {\n    ...\n    \"storybook\": {\n      ...\n      \"options\": {\n        ...\n        \"port\": 4400,\n        ...\n      },\n      ...\n    },\n    ...\n`  },\n}\n```\n\nWe can keep this port for the project which will serve as the host of our configuration, but we must change the port numbers of the other projects, the projects which will be composed/composed. The reason for that is the following:\n\n- When the `nx run-many --target=storybook --parallel=3` command executes, it will go and look into your `project.json` file to see the port you have assigned for that project's Storybook.\n- When it finds a port that it is already used, it will change the port number randomly (usually adding `1` until it finds an empty port).\n\nSince we are using the `--parallel` flag, and the commands are executed in parallel, we cannot know for sure the order that the `storybook` command will be executed. So, we cannot be sure which port will correspond to which of the projects.\n\nIf we don't change the port numbers, and there are projects that want to use the same port for their Storybooks, the `run-many` command will change that port, and the result will be that we will not know for sure which\nof our projects runs on which port. The problem that this creates is that we will not be able to create the proper configuration for Storybook Composition, since we will not be able to tell which URLs our composed Storybooks run on.\n\n### Add the refs in our host project's `.storybook/main.js` file\n\nNow, we need to add to our host project's `main.js` file (the path of which would be `apps/main-host/.storybook/main.js`) a `refs` object, to configure our composition. An example of such a configuration looks like this:\n\n```javascript\nmodule.exports = {\n  ...,\n  refs: {\n    one-composed: {\n      title: 'One composed',\n      url: 'http://localhost:4401',\n    },\n    two-composed: {\n      title: 'Two composed',\n      url: 'http://localhost:4402',\n    },\n    three-composed: {\n      title: 'Three composed',\n      url: 'http://localhost:4403',\n    },\n  },\n};\n```\n\n### Optional: use `run-commands` and create a `storybook-composition` target\n\nIf you want to take advantage of the [`run-commands`](https://nx.dev/packages/workspace/executors/run-commands) functionality of Nx, you can create a custom target that will invoke the `run-parallel` command for your \"composed\" Storybook instances.\n\nThe objective is to end up with a new target in your `main-host`'s `project.json` file (`apps/main-host/project.json`) that looks like this:\n\n```json\n    \"storybook-composition\": {\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"nx storybook one-composed\",\n          \"nx storybook two-composed\",\n          \"nx storybook three-composed\"\n          ],\n        \"parallel\": true\n      }\n    }\n```\n\nwhich you can then invoke like this:\n\n```bash\nnx run main-host:storybook-composition\n```\n\nwhich will take care of starting all your \"composed\" Storybook instances, before you run `nx storybook main-host`.\n\n#### Generating a new `target` in our `main-host`\n\nLet's first generate a new `target` called `storybook-composition` for our `main-host`.\n\nRun the following command:\n\n```bash\nnx generate @nrwl/workspace:run-commands storybook-composition --command='nx storybook one-composed' --project=main-host\n```\n\nThis will create a new `target` in your `apps/main-host/project.json`:\n\n```json\n    \"storybook-composition\": {\n      \"executor\": \"nx:run-commands\",\n      \"outputs\": [],\n      \"options\": {\n        \"command\": \"nx storybook one-composed\"\n      }\n    }\n```\n\nNow, change the `command` option to be `commands`, add the `\"parallel\": true` option, and add all the other \"composed\" Storybook commands:\n\n```json\n    \"storybook-composition\": {\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"nx storybook one-composed\",\n          \"nx storybook two-composed\",\n          \"nx storybook three-composed\"\n          ],\n        \"parallel\": true\n      }\n    }\n```\n\nNow, you can start all your \"composed\" Storybook instances by running:\n\n```bash\nnx run main-host:storybook-composition\n```\n\n**After** all of your \"composed\" Storybook instances have started, you can run in a new terminal:\n\n```bash\nnx storybook main-host\n```\n\nThis approach takes the \"burden\" of writing the `run-many` command manually, and makes it easier to add/remove \"composed\" Storybook instances.\n"
    }
  ],
  "generators": [],
  "executors": []
}
