{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "jest",
  "description": "The Nx Plugin for Jest contains executors and generators allowing your workspace to use the powerful Jest testing capabilities.",
  "root": "C:/development/nx/packages/jest",
  "source": "C:\\development\\nx\\packages\\jest\\src",
  "documentation": [
    {
      "name": "Overview",
      "id": "overview",
      "path": "/packages/jest",
      "file": "shared/jest-plugin",
      "content": "![Jest logo](/shared/jest-logo.png)\r\n\r\n[Jest](https://jestjs.io/) is an open source test runner created by Facebook. It has a lot of great features:\r\n\r\n- Immersive watch mode for providing near instant feedback when developing tests.\r\n- Snapshot testing for validating features.\r\n- Great built-in reporter for printing out test results.\r\n\r\n## Setting up Jest\r\n\r\nBy default, Nx will use Jest when creating applications and libraries.\r\n\r\n```shell\r\nnx g @nrwl/web:app frontend\r\n```\r\n\r\n### Adding Jest to an Existing Project\r\n\r\nAdd Jest to a project using the `jest-project` generator from `@nrwl/jest`.\r\n\r\nFirst, install `@nrwl/jest`, if not already installed using your preferred package manager.\r\n\r\n```shell\r\nnpm install --save-dev @nrwl/jest\r\n```\r\n\r\n```shell\r\nyarn add --dev @nrwl/jest\r\n```\r\n\r\nOnce installed, run the `jest-project` generator\r\n\r\n```shell\r\nnx g @nrwl/jest:jest-project --project=<project-name>\r\n```\r\n\r\n> Hint: You can use the `--dry-run` flag to see what will be generated.\r\n\r\nReplacing `<project-name>` with the name of the project you're wanting to add Jest too.\r\n\r\n## Using Jest\r\n\r\n### Testing Applications\r\n\r\nThe recommended way to run/debug Jest tests via an editor\r\n\r\n- [VSCode](https://marketplace.visualstudio.com/items?itemName=firsttris.vscode-jest-runner)\r\n- [Webstorm](https://blog.jetbrains.com/webstorm/2018/10/testing-with-jest-in-webstorm/)\r\n\r\nTo run Jest tests via nx use\r\n\r\n```shell\r\nnx test frontend\r\n```\r\n\r\n### Watching for Changes\r\n\r\nUsing the `--watch` flag will run the tests whenever a file changes.\r\n\r\n```shell\r\nnx test frontend --watch\r\n```\r\n\r\n### Snapshot Testing\r\n\r\nJest has support for **Snapshot Testing**, a tool which simplifies validating data. Check out the [official Jest Documentation on Snapshot Testing](https://jestjs.io/docs/en/snapshot-testing).\r\n\r\nExample of using snapshots:\r\n\r\n```typescript\r\ndescribe('SuperAwesomFunction', () => {\r\n  it('should return the correct data shape', () => {\r\n    const actual = superAwesomFunction();\r\n    expect(actual).toMatchSnapshot();\r\n  });\r\n});\r\n```\r\n\r\nWhen using snapshots, you can update them with the `--updateSnapshot` flag, `-u` for short.\r\n\r\n> By default, snapshots will be generated when there are not existing snapshots for the associated test.\r\n\r\n```shell\r\nnx test frontend -u\r\n```\r\n\r\nSnapshot files should be checked in with your code.\r\n\r\n### Performance in CI\r\n\r\nTypically, in CI it's recommended to use `nx affected --target=test --parallel=[# CPUs] -- --runInBand` for the best performance.\r\n\r\nThis is because each [jest process creates a workers based on system resources](https://jestjs.io/docs/cli#--maxworkersnumstring), running multiple projects via nx and using jest workers will create too many process overall causing the system to run slower than desired. Using the `--runInBand` flag tells jest to run in a single process.\r\n\r\n## Configurations\r\n\r\n### Jest\r\n\r\nPrimary configurations for Jest will be via the `jest.config.js` file that generated for your project. This file will extend the root `jest.config.js` file. Learn more about [Jest configurations](https://jestjs.io/docs/configuration#options).\r\n\r\n### Nx\r\n\r\nNx Jest Plugin options can be configured via the [project config file](/configuration/projectjson) or via the [command line flags](/packages/jest).\r\n\r\n> Hint: Use `--help` to see all available options\r\n>\r\n> ```shell\r\n> nx test <project-name> --help\r\n> ```\r\n\r\n### Code Coverage\r\n\r\nEnable code coverage with the `--coverage` flag or by adding it to the executor options in the [project configuration file](/configuration/projectjson).\r\n\r\nBy default, coverage reports will be generated in the `coverage/` directory under projects name. i.e. `coverage/apps/frontend`. Modify this directory with the `--coverageDirectory` flag. Coverage reporters can also be customized with the `--coverageReporters` flag.\r\n\r\n> `coverageDirectory` and `coverageReporters` are configurable via the project configuration file as well.\r\n\r\n### Global setup/teardown with nx libraries\r\n\r\nIn order to use Jest's global setup/teardown functions that reference nx libraries, you'll need to register the TS path for jest to resolve the libraries.\r\nNx provides a helper function that you can import within your setup/teardown file.\r\n\r\n```typescript\r\nimport { registerTsProject } from 'nx/src/utils/register';\r\nconst cleanupRegisteredPaths = registerTsProject('.', 'tsconfig.base.json');\r\n\r\nimport { yourFancyFunction } from '@some-org/my-util-library';\r\nexport default async function () {\r\n  yourFancyFunction();\r\n}\r\n// make sure to run the clean up!\r\ncleanupRegisteredPaths();\r\n```\r\n\r\n## Debugging Failing Tests\r\n\r\nIf your code editor doesn't provide a way to debug your tests, you can leverage the Chrome DevTools to debug your tests with the `--inspect-brk` flag for node.\r\n\r\n```shell\r\nnode --inspect-brk ./node_modules/@nrwl/cli/bin/nx test <project-name>\r\n```\r\n\r\nEnter [chrome://inspect](chrome://inspect) in Chrome address bar and inspect the target to attach to the node process. Visit the official [Jest documentation](https://jestjs.io/docs/en/troubleshooting#tests-are-failing-and-you-don-t-know-why) to find out more.\r\n\r\n## More Documentation\r\n\r\n- [Jest Docs](https://jestjs.io/)\r\n- [@nrwl/jest options](/packages/jest)\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
