{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "next",
  "description": "When using Next.js in Nx, you get the out-of-the-box support for TypeScript, Cypress, and Jest. No need to configure anything: watch mode, source maps, and typings just work.\n\nThe Next.js plugin contains executors and generators for managing Next.js applications and libraries within an Nx workspace. It provides:\n\n\n- Scaffolding for creating, building, serving, linting, and testing Next.js applications.\n\n- Integration with building, serving, and exporting a Next.js application.\n\n- Integration with React libraries within the workspace.",
  "root": "C:/development/nx/packages/next",
  "source": "C:\\development\\nx\\packages\\next\\src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview",
      "path": "/packages/next",
      "file": "shared/next-plugin",
      "content": "![](/shared/nextjs-logo.png)\r\n\r\nWhen using Next.js in Nx, you get the out-of-the-box support for TypeScript, Cypress, and Jest. No need to configure anything: watch mode, source maps, and typings just work.\r\n\r\nThe Next.js plugin contains executors and generators for managing Next.js applications and libraries within an Nx workspace. It provides:\r\n\r\n- Scaffolding for creating, building, serving, linting, and testing Next.js applications.\r\n- Integration with building, serving, and exporting a Next.js application.\r\n- Integration with React libraries within the workspace.\r\n\r\n## Setting up Next.js\r\n\r\nTo create a new Nx workspace with Next.js, run `npx create-nx-workspace@latest --preset=next`.\r\n\r\nTo add Next.js to an existing Nx workspace, install the `@nrwl/next` package. Make sure to install the version that matches your `@nrwl/workspace` version.\r\n\r\n```bash\r\n#yarn\r\nyarn add --dev @nrwl/next\r\n```\r\n\r\n```bash\r\n#npm\r\nnpm install --save-dev @nrwl/next\r\n```\r\n\r\n### Creating Applications\r\n\r\nYou can add a new application with the following:\r\n\r\n```bash\r\nnx g @nrwl/next:app my-new-app\r\n```\r\n\r\n### Generating Libraries\r\n\r\nNx allows you to create libraries with just one command. Some reasons you might want to create a library include:\r\n\r\n- Share code between applications\r\n- Publish a package to be used outside the monorepo\r\n- Better visualize the architecture using `nx graph`\r\n\r\nFor more information on Nx libraries, see our documentation on [Creating Libraries](/structure/creating-libraries)\r\nand [Library Types](/structure/library-types).\r\n\r\nTo generate a new library run:\r\n\r\n```bash\r\nnx g @nrwl/next:lib my-new-lib\r\n```\r\n\r\n### Generating Pages and Components\r\n\r\nNx also provides commands to quickly generate new pages and components for your application.\r\n\r\n```bash\r\nnx g @nrwl/next:page my-new-page --project=my-new-app\r\n\r\nnx g @nrwl/next:component my-new-component --project=my-new-app\r\n```\r\n\r\nAbove commands will add a new page `my-new-page` and a component `my-new-component` to `my-new-app` project respectively.\r\n\r\nNx generates components with tests by default. For pages, you can pass the `--withTests` option to generate tests under the `specs` folder.\r\n\r\n## Using Next.js\r\n\r\n### Serving Next.js Applications\r\n\r\nYou can run `nx serve my-new-app` to serve a Next.js application called `my-new-app` for development. This will start the dev server at http://localhost:4200.\r\n\r\nTo serve a Next.js application for production, add the `--prod` flag to the serve command:\r\n\r\n```bash\r\nnx serve my-new-app --prod\r\n```\r\n\r\n### Using an Nx Library in your Application\r\n\r\nYou can import a library called `my-new-lib` in your application as follows.\r\n\r\n```typescript jsx\r\n// apps/my-next-app/pages/index.tsx\r\nimport { MyNewLib } from '@<your nx workspace name>/my-new-lib';\r\n\r\nexport function Index() {\r\n  return (\r\n    <MyNewLib>\r\n      <p>The main content</p>\r\n    </MyNewLib>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n```\r\n\r\nThere is no need to build the library prior to using it. When you update your library, the Next.js application will automatically pick up the changes.\r\n\r\n### Publishable libraries\r\n\r\nFor libraries intended to be built and published to a registry (e.g. npm) you can use the `--publishable` and `--importPath` options.\r\n\r\n```bash\r\nnx g @nrwl/next:lib my-new-lib --publishable --importPath=@happynrwl/ui-components\r\n```\r\n\r\n### Testing Projects\r\n\r\nYou can run unit tests with:\r\n\r\n```bash\r\nnx test my-new-app\r\nnx test my-new-lib\r\n```\r\n\r\nReplace `my-new-app` and `my-new-lib` with the name or the project you want to test. This command works for both applications and libraries.\r\n\r\nYou can also run E2E tests for applications:\r\n\r\n```bash\r\nnx e2e my-new-app-e2e\r\n```\r\n\r\nReplace `my-new-app-e2e` with the name or your project with -e2e appended.\r\n\r\n### Linting Projects\r\n\r\nYou can lint projects with:\r\n\r\n```bash\r\nnx lint my-new-app\r\nnx lint my-new-lib\r\n```\r\n\r\nReplace `my-new-app` and `my-new-lib` with the name or the project you want to test. This command works for both applications and libraries.\r\n\r\n### Building Projects\r\n\r\nNext.js applications can be build with:\r\n\r\n```bash\r\nnx build my-new-app\r\n```\r\n\r\nAnd if you generated a library with --buildable, then you can build a library as well:\r\n\r\n```bash\r\nnx build my-new-lib\r\n```\r\n\r\nAfter running a build, the output will be in the `dist` folder. You can customize the output folder by setting `outputPath` in the project's `project.json` file.\r\n\r\nThe library in `dist` is publishable to npm or a private registry.\r\n\r\n### Static HTML Export\r\n\r\nNext.js applications can be statically exported with:\r\n\r\n```bash\r\nnx export my-new-app\r\n```\r\n\r\n### Deploying Next.js Applications\r\n\r\nOnce you are ready to deploy your Next.js application, you have absolute freedom to choose any hosting provider that fits your needs.\r\n\r\nYou may know that the company behind Next.js, Vercel, has a great hosting platform offering that is developed in tandem with Next.js itself to offer a great overall developer and user experience. We have detailed [how to deploy your Next.js application to Vercel in a separate guide](/guides/deploy-nextjs-to-vercel).\r\n\r\n## More Documentation\r\n\r\nHere are other resources that you may find useful to learn more about Next.js and Nx.\r\n\r\n- **Blog post:** [Building a blog with Next.js and Nx Series](https://blog.nrwl.io/create-a-next-js-web-app-with-nx-bcf2ab54613) by Juri Strumpflohner\r\n- **Video tutorial:** [Typescript NX Monorepo with NextJS and Express](https://www.youtube.com/watch?v=WOfL5q2HznI) by Jack Herrington\r\n"
    }
  ],
  "generators": [],
  "executors": []
}
