---
title: 'NPM Workspaces Tutorial'
description: In this tutorial you'll add Nx to an existing NPM workspaces repo
---

# NPM Workspaces Tutorial

In this tutorial, you'll learn how to add Nx to a repository with an existing NPM workspaces setup. You'll see how Nx can provide immediate value with very little configuration and then you can gradually enable more features of Nx.

- Add Nx to the repository with a single command
- Explore your workspace with the graph and project detail view
- Run your existing tasks that are automatically configured with caching
- Configure a task pipeline
- Configure caching for your tasks

## Final Result

Here's the source code of the final result for this tutorial.

{% github-repository url="https://github.com/nrwl/nx-recipes/tree/main/npm-workspaces" /%}

## Starting Repository

To get started, check out [the sample repository](https://github.com/nrwl/tuskydesigns):

```shell
git clone https://github.com/nrwl/tuskydesign.git
```

The repository has two packages (under `packages/buttons` and `packages/forms`) that are used in a `demo` application located in `apps/demo`. The root `package.json` has a `workspaces` property that tells NPM how to find the projects in the repository.

```json {% fileName="package.json" %}
{
  "workspaces": ["packages/*", "apps/*"]
}
```

Because of this setting, when the install command is run at the root, the correct packages are installed for each project.  NPM will create dedicated `node_modules` folders inside of each project folder where necessary.

```shell
npm install
```

Now let's try running some tasks.  To lint the `demo` app, use the `lint` npm script:

```{% command="cd apps/demo && npm run lint" path="~/tuskydesigns/apps/demo" %}
> @tuskdesign/demo@0.0.0 lint
> eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0
```

If you try to build the `demo` app, it will fail.

```{% command="npm run build" path="/apps/demo" %}
> @tuskdesign/demo@0.0.0 prebuild
> npm run typecheck


> @tuskdesign/demo@0.0.0 typecheck
> tsc


> @tuskdesign/demo@0.0.0 build
> vite build

vite v5.0.12 building for production...
âœ“ 4 modules transformed.
[commonjs--resolver] Failed to resolve entry for package "@tuskdesign/buttons". The package may have incorrect main/module/exports specified in its package.json.
error during build:
Error: Failed to resolve entry for package "@tuskdesign/buttons". The package may have incorrect main/module/exports specified in its package.json.
    at packageEntryFailure (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/dist/node/chunks/dep-9A4-l-43.js:29443:17)
    at resolvePackageEntry (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/dist/node/chunks/dep-9A4-l-43.js:29440:5)
    at tryNodeResolve (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/dist/node/chunks/dep-9A4-l-43.js:29210:20)
    at Object.resolveId (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/dist/node/chunks/dep-9A4-l-43.js:28978:28)
    at file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/node_modules/rollup/dist/es/shared/node-entry.js:19579:40
    at async PluginDriver.hookFirstAndGetPlugin (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/node_modules/rollup/dist/es/shared/node-entry.js:19479:28)
    at async resolveId (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/node_modules/rollup/dist/es/shared/node-entry.js:18149:26)
    at async ModuleLoader.resolveId (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/node_modules/rollup/dist/es/shared/node-entry.js:18563:15)
    at async Object.resolveId (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/dist/node/chunks/dep-9A4-l-43.js:8141:10)
    at async PluginDriver.hookFirstAndGetPlugin (file:///Users/isaac/Documents/code/pnpm-monorepo/node_modules/vite/node_modules/rollup/dist/es/shared/node-entry.js:19479:28)
npm ERR! Lifecycle script `build` failed with error: 
npm ERR! Error: command failed 
npm ERR!   in workspace: @tuskdesign/demo@0.0.0 
npm ERR!   at location: /Users/isaac/Documents/code/pnpm-monorepo/apps/demo 
```

The `build` script fails because it needs the `buttons` and `forms` projects to be built first in order to work correctly.  To do this, lets run to the root of the repository and run the `build` task for every project in the repo:

```shell
cd ../.. && npm run build --ws
```

When the `buttons` and `forms` projects are built first, the `demo` app can build successfully.

Now that you have a basic understanding of the repository we're working with, let's see how Nx can help us.

## Adding Nx

To enable Nx in your repository, run a single command:

```
npx nx@latest init
```

This command will download the latest version of Nx and help set up your repository to take advantage of it.

First, the script will propose installing some plugins based on the packages that are being used in your repository. Let's agree to using the `@nx/eslint` and `@nx/vite` plugins.

Second, the script asks if we want to use Nx in our existing `package.json` scripts. Say yes and Nx will update any of your existing scripts that can be automatically configured for caching.

```{% command="npx nx@latest init" path="~/tuskydesigns" %}
 NX   Recommended Plugins:

Add these Nx plugins to integrate with the tools used in your workspace.

âœ” Which plugins would you like to add? Â· @nx/eslint, @nx/vite
âœ” Do you want to start using Nx in your package.json scripts? Â· Yes
âœ” Would you like remote caching to make your build faster? Â· Yes

 NX   ðŸ“¦ Installing Nx

 ...
 
 NX   ðŸ‘€ Explore Your Workspace

Run "nx graph" to show the graph of the workspace. It will show tasks that you can run with Nx.
Read this guide on exploring your workspace: https://nx.dev/features/explore-graph
```

## Explore Your Workspace

If you run `nx graph` as instructed, you'll see the dependencies between your projects.



Project details view of `demo` shows tasks that can be run with Nx

Look at the `demo` app:

## Caching for Free

`npm run lint` twice, see that it is cached

## Task Pipelines

Delete the `packages/buttons/dist` folder and run `npm run build`. The build still works. Nx knows that `demo` depends on `buttons` and the `build` target in the project detail view shows that `build` needs to run the `build` target for all dependencies before it runs.

We can also remove the `prebuild` script and use Nx's task pipelines instead. Need to make sure to keep the `^build` entry in the `dependsOn` array.

```
"build": {
    "dependsOn": ["^build", "typecheck"]
}
```

## Cache Typecheck

Nx already made lint faster by caching it, but we want build to be faster too.

The vite build itself is already cached by Nx, but the `typecheck` step is not. Let's define how Nx should cache it.

Use `nx exec --` to run the npm script through Nx and make sure to add `typecheck` to the `includedScripts` array.

```
"typecheck": {
    "cache": true,
    "inputs": ["default", "^default"]
}
```

Now if we run `npm run build` multiple times, you'll see that the cache is being used for 2 out of 4 tasks.

```
Nx read the output from the cache instead of running the command for 2 out of 4 tasks
```

## Cache the Packages

Do the same thing for `typecheck` in other projects.
This is repetitive, let's define these settings all in one place.

`targetDefaults`

```json {% fileName="nx.json" %}
      "typecheck": {
        "cache": true,
        "inputs": ["default", "^default"]
      }
```

The `build` tasks for the packages are also not cached. We can set up caching in a similar way, but we have to set it up individually because we don't want to overwrite the settings for the `demo` project's `build` task. And this time we need to include an `outputs` property.

```
"build": {
    "cache": true,
    "inputs": ["default", "^default"],
    "outputs": ["{projectRoot}/dist"]
}
```

`npm run build`

The output is a little hard to read, let's try running it directly with Nx instead

`nx build`

You can also build every project in the repo with this command:

`nx run-many -t build`

Set up for CI (a few paragraphs talking about these things)

- Talk about affected
- Nx Replay
- Nx Agents distributing tasks

Next step: Choose a CI tutorial to take full advantage of Nx in CI

- GitHub Actions
- Circle CI



- Show starter repo
- Run nx init, skip plugins
  - Show nx graph
  - Show PDV
    - build, typecheck and lint set up to cache automatically
    - build task pipeline set up automatically.  Walk through adding typecheck to dependsOn
- `nx add @nx/vite` - show inputs/outputs automatically set for `nx build`
  - Change build destination and show `outputs` are updated
- `nx add @nx/eslint`
Cache build in packages (setting outputs, need to set these individually so that we don't overwrite the inferred settings in demo:build)
Final PDV task graph shows 6 tasks that are run when you run nx build @tuskdesign/demo
You should set up CI
affected
Nx Replay
Nx Agents
Next step: Choose a CI tutorial to take full advantage of Nx in CI
GitHub Actions
Circle CI
