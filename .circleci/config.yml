version: 2.1

# Variables
var_1: &working_directory ~/repo
var_2:
  &nx_cli [
    'e2e-workspace',
    'e2e-cli,e2e-nx-plugin,dep-graph-dep-graph-e2e',
    'e2e-cypress,e2e-jest',
    'e2e-react',
    'e2e-next,e2e-gatsby',
    'e2e-node',
    'e2e-web,e2e-linter,e2e-storybook',
  ]
var_3: &ng_cli ['e2e-angular']

executors:
  linux:
    working_directory: *working_directory
    docker:
      - image: cimg/node:12.20-browsers

  windows:
    working_directory: *working_directory
    resource_class: windows.medium
    machine:
      image: windows-server-2019-vs2019:stable
    shell: cmd.exe

commands:
  setup:
    parameters:
      os:
        type: string
    steps:
      - checkout
      - when:
          condition:
            equal: [<< parameters.os >>, windows]
          steps:
            - run: nvm install 12.20
            - run: nvm use 12.20
            - run: npm install -g yarn@1.19.0
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - nrwl-nx-yarn-packages-<< parameters.os >>-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile --non-interactive --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save Yarn Package Cache
          # Windows needs its own cache key because binaries in node_modules are different.
          key: nrwl-nx-yarn-packages-<< parameters.os >>-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - when:
          condition:
            equal: [<< parameters.os >>, linux]
          steps:
            - run:
                name: Install PNPM
                command: npm install --prefix=$HOME/.local -g pnpm@5.18.9
      - when:
          condition:
            equal: [<< parameters.os >>, windows]
          steps:
            - run:
                name: Install PNPM
                command: npm install -g pnpm@5.18.9

jobs:
  agent1:
    parameters:
      os:
        type: string
        default: 'linux'
    executor: << parameters.os >>
    environment:
      NX_VERBOSE_LOGGING: "true"
    steps:
      - setup:
          os: << parameters.os >>
      - run:
          name: Build All Projects (Tmp)
          command: npx nx run-many --target=build --all --parallel
      - run:
          name: Agent
          command: npx nx-cloud start-agent --maxParallel=3
  agent2:
    parameters:
      os:
        type: string
        default: 'linux'
    executor: << parameters.os >>
    environment:
      NX_VERBOSE_LOGGING: "true"
    steps:
      - setup:
          os: << parameters.os >>
      - run:
          name: Build All Projects (Tmp)
          command: npx nx run-many --target=build --all --parallel
      - run:
          name: Agent
          command: npx nx-cloud start-agent --maxParallel=3
  main:
    parameters:
      os:
        type: string
        default: 'linux'
    executor: << parameters.os >>
    environment:
      NX_VERBOSE_LOGGING: "true"
      NX_CLOUD_DISTRIBUTED_EXECUTION: "true"
    steps:
      - setup:
          os: << parameters.os >>
      - run:
          name: Run Unit Tests
          command: npx nx affected --target=test
      - run:
          name: Run Lint Check
          command: npx nx affected --target=lint
      - run:
          name: Check Documentation
          command: yarn documentation
      - run:
          name: Check Imports
          command: yarn check-imports
      - run:
          name: Check Formatting
          command: yarn check-format
      - run:
          name: Check Commit Message Format
          command: yarn check-commit
      - run:
          name: Check Package dependencies
          command: yarn depcheck
      - run:
          name: Check Package dependencies
          command: npx nx-cloud stop-all-agents

workflows:
  build:
    jobs:
      - agent1
      - agent2
      - main

