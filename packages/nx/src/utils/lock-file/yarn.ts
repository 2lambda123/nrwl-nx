import { parseSyml, stringifySyml } from '@yarnpkg/parsers';
import { stringify } from '@yarnpkg/lockfile';
import { LockFileData, PackageDependency } from './lock-file-type';

export type YarnLockFile = Record<
  string,
  Omit<PackageDependency, 'packageMeta'>
>;

export type YarnBerryLockFile = {
  __metadata: {
    version: string;
    cacheKey: string;
  };
} & YarnLockFile;

/**
 * Parses Berry yarn.lock syml file
 * ```
 * __metadata:
 *    version: 7
 *    cacheKey: 9
 *
 * "{package}@npm:{versionRange}":
 *   version {version}
 *   {additionalFields}
 *   dependencies?:
 *     "{package}": "npm:{versionRange}"
 * ```
 * and maps to `LockFileData` object:
 * ```
 * {
 *  lockFileMetadata: {
 *   __metadata: { version: 7, cacheKey: 9 }
 *  },
 *  "{package}@npm:{version}": {
 *    version: {version},
 *    {additionalFields},
 *    packageMeta: ["{package}@npm:{versionRange}"]
 *    dependencies: {
 *     "{package}": "npm:{versionRange}"
 *    }
 *  }
 * }
 * ```
 *
 * or parses classic yarn.lock file to `LockFileData` object
 * ```
 * "{package}@{versionRange}":
 *   version {version}
 *   {additionalFields}
 *   dependencies?:
 *     "{package}": "{versionRange}"
 * ```
 * and maps to `LockFileData` object:
 * ```
 * {
 *  "{package}@{version}": {
 *    version: {version},
 *    {additionalFields},
 *    packageMeta: ["{package}@{versionRange}"]
 *    dependencies: {
 *     "{package}": "{versionRange}"
 *    }
 *  }
 * }
 * ```
 *
 * @param lockFile
 * @returns
 */
export function parseLockFile(lockFile: string): LockFileData {
  const { __metadata, ...dependencies } = parseSyml(lockFile);
  return {
    dependencies: mapPackages(dependencies),
    ...(__metadata ? { lockFileMetadata: { __metadata } } : {}),
  };
}

/**
 * Generates yarn.lock file from `LockFileData` object
 *
 * @param lockFile
 * @returns
 */
export function stringifyLockFile(lockFileData: LockFileData): string {
  const isBerry = !!lockFileData.lockFileMetadata?.__metadata;
  const lockFile = {
    ...lockFileData.lockFileMetadata,
    ...unmapPackages(lockFileData.dependencies, isBerry),
  };
  if (isBerry) {
    return (
      `# This file was generated by Nx. Do not edit this file directly\n# Manual changes might be lost - proceed with caution!\n\n` +
      stringifySyml(lockFile)
    );
  } else {
    return stringify(lockFile);
  }
}

function mapPackages(packages: YarnLockFile): LockFileData['dependencies'] {
  const mappedPackages: LockFileData['dependencies'] = {};
  Object.entries(packages).forEach(([keyExpr, value]) => {
    const keys = keyExpr.split(', ');
    const packageName = keys[0].slice(0, keys[0].lastIndexOf('@'));
    const newKey = `${packageName}@${value.version}`;
    mappedPackages[newKey] =
      mappedPackages[newKey] ||
      ({
        ...value,
        packageMeta: [],
      } as PackageDependency);
    mappedPackages[newKey].packageMeta.push(...keys);
  });
  return mappedPackages;
}

function unmapPackages(
  mappedPackages: YarnLockFile,
  isBerry: boolean
): YarnLockFile {
  const packages: YarnLockFile = {};
  Object.values(mappedPackages).forEach((value) => {
    const { packageMeta, ...rest } = value;
    if (isBerry) {
      packages[packageMeta.join(', ')] = rest;
    } else {
      packageMeta.forEach((key) => {
        packages[key] = rest;
      });
    }
  });
  return packages;
}
