{
  "version": 2,
  "outputCapture": "direct-nodejs",
  "title": "Module Federation SSR Dev Server",
  "description": "Serve a SSR host application along with its known remotes.",
  "cli": "nx",
  "type": "object",
  "properties": {
    "browserTarget": {
      "type": "string",
      "description": "Target which builds the browser application.",
      "x-priority": "important"
    },
    "serverTarget": {
      "type": "string",
      "description": "Target which builds the server application.",
      "x-priority": "important"
    },
    "port": {
      "type": "number",
      "description": "The port to be set on `process.env.PORT` for use in the server.",
      "default": 4200,
      "x-priority": "important"
    },
    "devRemotes": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of remote applications to run in development mode (i.e. using serve target).",
      "x-priority": "important"
    },
    "skipRemotes": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of remote applications to not automatically serve, either statically or in development mode.",
      "x-priority": "important"
    },
    "host": {
      "type": "string",
      "description": "Host to listen on.",
      "default": "localhost"
    },
    "static": {
      "type": "boolean",
      "description": "Whether to use a static file server instead of the webpack-dev-server. This should be used for remote applications that are also host applications."
    },
    "staticRemotesPort": {
      "type": "number",
      "description": "The port at which to serve the file-server for the static remotes."
    },
    "pathToManifestFile": {
      "type": "string",
      "description": "Path to a Module Federation manifest file (e.g. `my/path/to/module-federation.manifest.json`) containing the dynamic remote applications relative to the workspace root."
    },
    "ssl": {
      "type": "boolean",
      "description": "Serve using HTTPS.",
      "default": false
    },
    "sslKey": {
      "type": "string",
      "description": "SSL key to use for serving HTTPS."
    },
    "sslCert": {
      "type": "string",
      "description": "SSL certificate to use for serving HTTPS."
    }
  },
  "required": ["browserTarget", "serverTarget"]
}
