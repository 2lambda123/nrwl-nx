import { generateFiles, Tree, wrapRule } from '@nrwl/devkit';
import {
  addProjectToNxJsonInTree,
  names,
  offsetFromRoot,
  projectRootDir,
  ProjectType,
  toFileName,
  updateWorkspaceInTree
} from '@nrwl/workspace';
import * as path from 'path';
import { <%= className %>SchematicSchema } from './schema';

/**
 * Depending on your needs, you can change this to either `Library` or `Application`
 */
const projectType = ProjectType.Library

interface NormalizedSchema extends <%= className %>SchematicSchema { 
  projectName: string;
  projectRoot: string;
  projectDirectory: string;
  parsedTags: string[]
}

function normalizeOptions(options: <%= className %>SchematicSchema): NormalizedSchema {
  const name = toFileName(options.name);
  const projectDirectory = options.directory
    ? `${toFileName(options.directory)}/${name}`
    : name;
  const projectName = projectDirectory.replace(new RegExp('/', 'g'), '-');
  const projectRoot = `${projectRootDir(projectType)}/${projectDirectory}`;
  const parsedTags = options.tags
    ? options.tags.split(',').map(s => s.trim())
    : [];

  return {
    ...options,
    projectName,
    projectRoot,
    projectDirectory,
    parsedTags
  };
}

function addFiles(host: Tree, options: NormalizedSchema) {
    const templateOptions = {
      ...options,
      ...names(options.name),
      offsetFromRoot: offsetFromRoot(options.projectRoot),
      template: ''
    };
    generateFiles(host, path.join(__dirname, 'files'), options.projectRoot, templateOptions);
}

export default function(host: Tree, options: <%= className %>SchematicSchema) {
    const normalizedOptions = normalizeOptions(options);

    wrapRule(updateWorkspaceInTree((json) => {
        json.projects[normalizedOptions.projectName] = {
          root: normalizedOptions.projectRoot,
          sourceRoot: `${normalizedOptions.projectRoot}/src`,
          architect: {
            'build': {
              builder: '<%= npmPackageName %>:build'
            }
          }
        }
        return json;
    }))(host);

    wrapRule(addProjectToNxJsonInTree(normalizedOptions.projectName, {
     tags: normalizedOptions.parsedTags,
   }))(host);

   addFiles(host, normalizedOptions);
}
