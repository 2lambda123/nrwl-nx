# <%= formattedNames.className %>

<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

✨ Your new, shiny [Nx workspace](https://nx.dev) is ready ✨. 
<% if (learnMoreLink) { %>
[Learn more about this workspace setup and its capabilities](<%= learnMoreLink %>) or run `npx nx graph` to visually explore what was created. Now, let's get you up to speed! 
<% } else { %>
Run `npx nx graph` to visually explore what got created. Now, let's get you up to speed!
<% } %>
## Run tasks 
<% if (!isEmptyRepo) { %><% if (isJsStandalone) { %>
To build the library use:

```
npx nx build
```
        <% } else { %>
To run the dev server for your app, use:

```
npx nx <%= serveCommand %> <%= appName %>
```

To create a production bundle:

```
npx nx build <%= appName %>
```

To see all available targets to run for a project, run:

```
npx nx show project <%= appName %>
```
        <% } %><% } else { %>
To run tasks with Nx use:

```
npx nx <target> <project-name>
```

For example:

```
npx nx build myproject
```
<% } %>
These targets can be defined in the `package.json`, `projects.json` or [inferred automatically](https://nx.dev/concepts/inferred-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects).

[More about running tasks in the docs &raquo;](https://nx.dev/features/run-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
<% if(isJsStandalone || generateNxReleaseInfo) { %>
## Versioning and releasing

To version and release the library use

```
npx nx release
```

Pass `--dry-run` to see what would happen without actually releasing the library.

[Learn more about Nx release &raquo;](hhttps://nx.dev/features/manage-releases?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
<% } %><% if (!isJsStandalone) { %>
## Add new projects

Add projects to your workspace manually or use [Nx plugins](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) for easier integration. Among other things, Nx plugins include a [code generation](https://nx.dev/features/generate-code?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) feature to streamline the process.
<% if (isEmptyRepo) { %>
To install a new plugin you can use the `nx add` command. Here's an example of adding the React plugin:
```
npx nx add @nx/react
```

Use the plugin's generator to create new projects. For example, to create a new React app or library:

```
# Genenerate an app
npx nx g @nx/react:app demo

# Generate a library
npx nx g @nx/react:lib some-lib
```
<% } else { %>
Use the plugin's generator to create new projects.
<% if(generateAppCmd) {%>
To generate a new application, use:

```
npx nx g <%= generateAppCmd%>:app demo
```
<% } %><% if(generateLibCmd) {%>
To generate a new library, use:

```
npx nx g <%= generateLibCmd%>:lib mylib
```
<% } %><% } %>
You can use `npx nx list` to get a list of installed plugins. Then, run `npx nx list <plugin-name>` to learn about more specific capabilities of a particular plugin. Alternatively, use [Nx Console](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) to browse plugins and generators via an integrated UI.

[Learn more about Nx plugins &raquo;](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) | [Browse the plugin registry &raquo;](https://nx.dev/plugin-registry?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
<% } %>
## Set up CI!

Use the following command to generate a new CI configuration:

```
npx nx g ci-workflow
```

Then push your repo and connect to Nx Cloud:

```
npx nx connect
```

This gives you:

- [Remote caching](https://nx.dev/ci/features/remote-cache?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Task distribution across multiple machines](https://nx.dev/ci/features/distribute-task-execution?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Automated e2e test splitting](https://nx.dev/ci/features/split-e2e-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Task flakiness detection and rerunning](https://nx.dev/ci/features/flaky-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Install Nx Console

Nx Console is an editor extension that enhances the Nx workspace experience, offering improved code autocompletion and a GUI for runnoing tasks and generating cde. It is available for VSCode and IntelliJ.

[Install Nx Console &raquo;](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Useful links

Learn more:
<% if(learnMoreLink){ %>
- [Learn more about this workspace setup](<%= learnMoreLink %>)<% } %>
- [Learn about Nx on CI](https://nx.dev/ci/intro/ci-with-nx?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Releasing Packages with Nx release](https://nx.dev/features/manage-releases?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) 
- [What are Nx plugins?](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

And join the Nx community:
- [Discord](https://go.nx.dev/community)
- [Follow us on X](https://twitter.com/nxdevtools) or [LinkedIn](https://www.linkedin.com/company/nrwl)
- [Our Youtube channel](https://www.youtube.com/@nxdevtools)
- [Our blog](https://nx.dev/blog?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
