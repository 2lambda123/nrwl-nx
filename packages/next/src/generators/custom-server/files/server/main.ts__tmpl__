/*
 * This is only a minimal custom server to get started.
 * You may want to consider using Express or another server framework, and enable security features such as CORS.
 *
 * For more examples, see the Next.js repo:
 * - Express: https://github.com/vercel/next.js/tree/canary/examples/custom-server-express
 * - Hapi: https://github.com/vercel/next.js/tree/canary/examples/custom-server-hapi
 */
import { createServer } from 'http';
import { parse } from 'url';
import * as path from 'path';
import next from 'next';
import {
  ExecutorContext,
  ProjectConfiguration,
  parseTargetString,
  readJsonFile,
  readTargetOptions,
  workspaceLayout,
} from '@nrwl/devkit';
import { NextBuildBuilderOptions } from '@nrwl/next';
import { prepareConfig } from '@nrwl/next/src/utils/config';
import {
  PHASE_DEVELOPMENT_SERVER,
  PHASE_PRODUCTION_SERVER,
} from '@nrwl/next/src/utils/constants';
import {
  createProjectGraphAsync,
  readProjectsConfigurationFromProjectGraph,
} from 'nx/src/project-graph/project-graph';
import { workspaceRoot} from 'nx/src/utils/workspace-root';

// Next.js server options:
// - The environment variable is set by `@nrwl/next:server` when running the dev server.
// - The fallback `__dirname` is for production builds.
// - Feel free to change this to suit your needs.
const dir = process.env.NX_NEXT_DIR || path.join(__dirname, '..');
const dev = process.env.NODE_ENV === 'development';

// HTTP Server options:
// - Feel free to change this to suit your needs.
const hostname = process.env.HOST || 'localhost';
const port = process.env.PORT ? parseInt(process.env.PORT) : 4200;

async function createNextApp() {
  const projectConfig = readJsonFile<ProjectConfiguration>(`${dir}/project.json`);
  const projectGraph = await createProjectGraphAsync();
  const workspaceConfig =
    readProjectsConfigurationFromProjectGraph(projectGraph);
  const context: ExecutorContext = {
    root: workspaceRoot,
    cwd: process.cwd(),
    workspace: workspaceConfig,
    isVerbose: false,
    projectGraph,
  };
  const buildOptions = readTargetOptions<NextBuildBuilderOptions>(
    parseTargetString(projectConfig.targets?.['serve']?.options?.['buildTarget'] ?? ''),
    context
  );
  const conf = await prepareConfig(
    dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_SERVER,
    buildOptions,
    context,
    [],
    path.join(context.root, workspaceLayout().libsDir)
  );

  return next({ dev, dir, conf });
}

async function main() {
  const nextApp = await createNextApp();

  const handle = nextApp.getRequestHandler();

  await nextApp.prepare();

  const server = createServer((req, res) => {
    const parsedUrl = parse(req.url, true);
    handle(req, res, parsedUrl);
  });

  server.listen(port, hostname);

  console.log(`[ ready ] on http://${hostname}:${port}`)
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
